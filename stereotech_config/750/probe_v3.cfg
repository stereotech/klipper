[gcode_macro CHECK_SENSOR_VERSION_AND_START_AUTOCALIBRATE]
description: macro to continue automatic calibration depending on the version of the sensor
gcode:
    AUTO_WCS_OFFSET_NEW_SERNSOR

[gcode_macro AUTO_WCS_OFFSET_NEW_SERNSOR]
description: macro do move for measuring and calculated WCS. Sensor DAC_v_1
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        {% set probe_sensor_version = 1 %}
        ADJUST_TEMPLATE_HEIGHT WCS=1
        ADJUST_TEMPLATE_HEIGHT WCS=2
        ; aligning template, axis C
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ; main moves for get and set the wcs coordinates
        ; get wcs3_z
        PROBE_TEMPLATE_POINT POINT=O_1
        SET_AUTO_WCS_POINT POINT=0
        ; get wcs3_y
        PROBE_TEMPLATE_POINT POINT=AY2_2
        SET_AUTO_WCS_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=AY1_2
        SET_AUTO_WCS_POINT POINT=1
        # get wcs_3_x
        PROBE_TEMPLATE_POINT POINT=AX3
        SET_AUTO_WCS_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=BX3
        SET_AUTO_WCS_POINT POINT=3
        # get wcs4_z
        PROBE_TEMPLATE_POINT POINT=DZ_2
        SET_AUTO_WCS_POINT POINT=4
        # get wcs4_y
        PROBE_TEMPLATE_POINT POINT=DY_1
        SET_AUTO_WCS_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=EY_1
        SET_AUTO_WCS_POINT POINT=6
        # get wcs4_x
        PROBE_TEMPLATE_POINT POINT=CX1_1
        SET_AUTO_WCS_POINT POINT=8
        PROBE_TEMPLATE_POINT POINT=CX2_2
        SET_AUTO_WCS_POINT POINT=9
        ; calculating start wcs coordinates
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.25)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION={probe_sensor_version}
        ; aligning template, axis C
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ; move for get and set probe_offset
        MOVE_TO_AUTO_WCS
    {% endif %}

[gcode_macro AUTO_BASEMENT_WCS]
description: macro do main moves for get wcs for SPIRAL and FULL modes.
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% if wcs == 0 %}
         MOVE_AUTOCALIBRATE_FULL_V_2
    {% else %}
        ; meachuring for mode the SPIRAL
        MOVE_AUTOCALIBRATE_SPIRAL_V_2
    {% endif %}

[gcode_macro ADJUST_BASEMENT_WCS]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    {% set probe_backlash_y = printer.auto_wcs.probe_backlash_y|default(0.0)|float %}
    {% set tool_length = printer['gcode_macro GET_TOOL_LENGTH'].tool_length|float %}
    {% set radius = printer.auto_wcs.tooling_radius %}
    {% set auto_wcs_adj = printer.save_variables.variables["auto_wcs_adj"]|default(0.0)|float %}
    {% if wcs == 0 %}
        ; Mode SPIRAL-FULL
        ; apply measuring for the set wcs_2_z radius.
        {% if tool_length > 35.0 %}
            ; FOR DEBUG
            {action_respond_info('\n-----------calculate wcs_2_z: probe_offset=%s; point_z=%s; radius=%s; auto_wcs_adj=%s; wcs_2_z=%s;\n' % (offsets[2], point[2], radius, auto_wcs_adj, (z - radius + auto_wcs_adj)))}
            G10 L2 P3 Z{z - radius + auto_wcs_adj}
        {% else %}
            {action_raise_error('204: Error, tool length not enough for calculate wcs_2_y')}
        {% endif %}
    {% elif wcs == 1 %}
        ; Mode SPIRAL
        {% if radius < 5.0 and tool_length > 35.0 %}
            G10 L2 P3 Z{z - radius}
        {% else %}
            ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
            G10 L2 P3 Y{y}
            G10 L2 P2 Z{old_z - (y - old_y)}
        {% endif %}
    {% elif wcs == 2 %}
        ; set wcs_1_z and wcs_2_y(raw).
        ; FOR DEBUG
        {action_respond_info('\n-----------calculate wcs_1_z: probe_offset=%s; point_z=%s; auto_wcs_adj=%s; wcs_1_z=%s;\n' % (offsets[2], point[2], auto_wcs_adj, (z + auto_wcs_adj)))}
        G10 L2 P2 Z{z + auto_wcs_adj }
        G10 L2 P3 Y{old_y - (z - old_z)}
    {% elif wcs == 3 %}
        ; apply measuring for the set wcs_2_y
        G10 L2 P3 Y{y + probe_backlash_y}
    {% elif wcs == 4 %}
        {% set x = printer.auto_wcs.wcs[0][0]|float %}
        ; set wcs_1_x
        G10 L2 P2 X{x}
    {% elif wcs == 5 %}
        {% set y = printer.auto_wcs.wcs[0][1]|float %}
        ; set wcs_1_y
        G10 L2 P2 Y{y}
    {% elif wcs == 6 %}
        {% set x = printer.auto_wcs.wcs[1][0]|float %}
        ; set the wcs_2_x
        G10 L2 P3 X{x}
    {% elif wcs == 7 %}
        ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
        G10 L2 P3 Y{y}
        G10 L2 P2 Z{old_z - (y - old_y)}
    {% endif %}
