[save_variables]
filename: ~/klipper/vars.cfg

[delayed_gcode LOAD_VARIABLES]
initial_duration: 1.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set z_offset = svv.z_offset|default(0.0) %}
    {% set a_offset = svv.a_offset|default(0.0) %}
    ; loading the coordinates offset for axes
    SET_GCODE_OFFSET Z={z_offset} A={a_offset}
    ; loading the WCS
    {% for wcs in range(1, 6) %}
        {% set wcs_x = "wcs_x" %}
        {% set wcs_y = "wcs_y" %}
        {% set wcs_z = "wcs_z" %}
        G10 L2 P{wcs+1} X{svv["wcs" ~ wcs ~ "_x"]|default(0.0)} Y{svv["wcs" ~ wcs ~ "_y"]|default(0.0)} Z{svv["wcs" ~ wcs ~ "_z"]|default(0.0)}
    {% endfor %}
    {% if printer["gcode_macro SET_NOZZLE_OFFSET"] %}
        SET_GCODE_VARIABLE MACRO=SET_NOZZLE_OFFSET VARIABLE=offset_x VALUE={svv.nozzle_x_offset|default(0.0)}
        SET_GCODE_VARIABLE MACRO=SET_NOZZLE_OFFSET VARIABLE=offset_y VALUE={svv.nozzle_y_offset|default(0.0)}
    {% endif %}
    {% if printer.probe %}
        ; load the probe offsets
        {% set probe_offsets = printer['gcode_macro CONSTANTS'].offsets_sensor|default([0.0, 0.0, 0.0]) %}
        Z_OFFSET_APPLY_PROBE X={svv.probe_offset_x|default(probe_offsets[0])} Y={svv.probe_offset_y|default(probe_offsets[1])} Z={svv.probe_offset_z|default(probe_offsets[2])} FROM_VARS=1
        ; load the B compensation
        B_AXIS_COMPENSATION_VARS B={svv.b_angle|default(0.0)} X={svv.rot_center_x|default(0.0)} Z={svv.rot_center_z|default(0.0)}
        ; load the bed_mesh profiles
        {% for key, profile in printer.bed_mesh.profiles.items() %}
            {% if svv[key ~ '_0_0'] %}
                {% set cmd_bed_mesh = namespace(cmd='') %}
                {% for key, profile in printer.bed_mesh.profiles.items() %}
                        {% set cmd_bed_mesh.cmd = cmd_bed_mesh.cmd ~ key %}
                        {% for list_points in profile['points'] %}
                            {% set points_list_index = loop.index - 1 %}
                            {% for point in list_points %}
                                {% set list_index = loop.index - 1 %}
                                {% set cmd_bed_mesh.cmd = cmd_bed_mesh.cmd ~ ' POINT_' ~ points_list_index ~ '_' ~ list_index ~ '=' ~ svv[key ~ '_' ~ points_list_index ~ '_' ~ list_index]|default(0.0) %}
                            {% endfor %}
                        {% endfor %}
                    BED_MESH_PROFILE ADD={cmd_bed_mesh.cmd}
                {% endfor %}
            {% endif %}
        {% endfor %}
        ; loading the skew_correction profiles
        {% for key, value in printer.skew_correction.skew_profiles.items() %}
            {% if svv[key ~ '_xy_skew'] %}
                SKEW_PROFILE CHANGE={key} XY={svv[key ~ '_xy_skew']} XZ={svv[key ~ '_xz_skew']} YZ={svv[key ~ '_yz_skew']}
            {% endif %}
        {% endfor %}
        SET_PROBE_BACKLASH BACKLASH_X={svv.probe_backlash_x|default(0.0)|float} BACKLASH_Y={svv.probe_backlash_y|default(0.0)|float} BACKLASH_Y_2={svv.probe_backlash_y_2|default(0.0)|float}
        ; load settings for apply and measuring skew_compensation
        SET_GCODE_VARIABLE MACRO=SETTINGS_APPLY_SKEW VARIABLE=apply_skew VALUE={svv.apply_skew|default(0)}
        SET_GCODE_VARIABLE MACRO=SETTINGS_MEASURE_SKEW VARIABLE=measure_skew VALUE={svv.measure_skew|default(0)}
    {% endif %}
    ; load state user setings for enable/disable filament_motion_sensor
    {% for heater in printer.heaters.available_heaters %}
        {% if 'extruder' in heater %}
            {% if printer["filament_motion_sensor" ~ " " ~ heater ~ "_sensor"] %}
                SET_FILAMENT_SENSOR SENSOR={heater ~ '_sensor'} ENABLE={svv[heater ~ '_sensor']|default(1)}
            {% endif %}
        {% endif %}
    {% endfor %}

[gcode_macro SAVE_VARIABLES]
gcode:
    SAVE_VARIABLE VARIABLE=z_offset VALUE={printer.gcode_move.homing_origin.z}
    SAVE_VARIABLE VARIABLE=a_offset VALUE={printer.gcode_move.homing_origin.a}
    {% for wcs in range(6) %}
        SAVE_VARIABLE VARIABLE=wcs{wcs}_x VALUE={printer.gcode_move.wcs_offsets[wcs][0]}
        SAVE_VARIABLE VARIABLE=wcs{wcs}_y VALUE={printer.gcode_move.wcs_offsets[wcs][1]}
        SAVE_VARIABLE VARIABLE=wcs{wcs}_z VALUE={printer.gcode_move.wcs_offsets[wcs][2]}
    {% endfor %}
    {% if printer["gcode_macro SET_NOZZLE_OFFSET"] %}
        SAVE_VARIABLE VARIABLE=nozzle_x_offset VALUE={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_x}
        SAVE_VARIABLE VARIABLE=nozzle_y_offset VALUE={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_y}
    {% endif %}
    {% if printer.probe %}
        {% for key, profile in printer.bed_mesh.profiles.items() %}
            {% set points = profile['points'] %}
            {% set rows = profile['points']|length %}
            {% set columns = profile['points'][0]|length %}
            {% for row in range(rows) %}
                {% for col in range(columns) %}
                    SAVE_VARIABLE VARIABLE={key}_{row}_{col} VALUE={points[row][col]}
                {% endfor %}
            {% endfor %}
        {% endfor %}

        SAVE_VARIABLE VARIABLE=b_angle VALUE={printer.b_axis_compensation.b_angle}
        SAVE_VARIABLE VARIABLE=rot_center_x VALUE={printer.b_axis_compensation.rot_center_x}
        SAVE_VARIABLE VARIABLE=rot_center_z VALUE={printer.b_axis_compensation.rot_center_z}

        {% for key, value in printer.skew_correction.skew_profiles.items() %}
            SAVE_VARIABLE VARIABLE={key}_xy_skew VALUE={value['xy_skew']}
            SAVE_VARIABLE VARIABLE={key}_xz_skew VALUE={value['xz_skew']}
            SAVE_VARIABLE VARIABLE={key}_yz_skew VALUE={value['yz_skew']}
        {% endfor %}
        SAVE_VARIABLE VARIABLE=probe_offset_x VALUE={printer.probe.offsets[0]}
        SAVE_VARIABLE VARIABLE=probe_offset_y VALUE={printer.probe.offsets[1]}
        SAVE_VARIABLE VARIABLE=probe_offset_z VALUE={printer.probe.offsets[2]}

        SAVE_VARIABLE VARIABLE=probe_backlash_x VALUE={printer.auto_wcs.probe_backlash_x}
        SAVE_VARIABLE VARIABLE=probe_backlash_y VALUE={printer.auto_wcs.probe_backlash_y}
        SAVE_VARIABLE VARIABLE=probe_backlash_y_2 VALUE={printer.auto_wcs.probe_backlash_y_2}
    {% endif %}
