#probe_template section
[gcode_macro AUTO_WCS]
gcode:
    AUTO_WCS_OFFSET_V2

[gcode_macro AUTO_WCS_OFFSET_V2]
description: macro do move for measuring and calculated WCS. Sensor DAC_v_2
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        PROBE_TEMPLATE_POINT POINT=A_Z
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=B_MY_C30
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=B_Y_C30
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=C_X
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=D_MX
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=A_Z_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=B_Y_A90_C60
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=B_MY_A90_C60
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=6
        PROBE_TEMPLATE_POINT POINT=D_MX_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=8
        PROBE_TEMPLATE_POINT POINT=C_X_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=9
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.3)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION=1
    {% endif %}
#probe_template section end

#probe_tool section
[gcode_macro AUTO_BASEMENT_WCS]
gcode:
    AUTO_BASEMENT_WCS_V2 {rawparams}

[gcode_macro AUTO_BASEMENT_WCS_V2]
description: macro do main moves for get wcs for SPIRAL and FULL modes.
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% if wcs == 0 %}
         MOVE_AUTOCALIBRATE_FULL_V2
    {% else %}
        ; meachuring for mode the SPIRAL
        MOVE_AUTOCALIBRATE_SPIRAL_V2
    {% endif %}

[gcode_macro ADJUST_BASEMENT_WCS]
gcode:
    ADJUST_BASEMENT_WCS_V2 {rawparams}





[gcode_macro ADJUST_BASEMENT_WCS_V2]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    {% set probe_backlash_y = printer.auto_wcs.probe_backlash_y|default(0.0)|float %}
    {% set tool_length = printer['gcode_macro GET_TOOL_LENGTH'].tool_length|float %}
    {% set radius = printer.auto_wcs.tooling_radius %}
    {% set auto_wcs_adj = printer.save_variables.variables["auto_wcs_adj"]|default(0.0)|float %}
    {% if wcs == 0 %}
        ; Mode SPIRAL-FULL
        ; apply measuring for the set wcs_2_z radius.
        {% if tool_length > 35.0 %}
            ; FOR DEBUG
            {action_respond_info('\n-----------calculate wcs_2_z: probe_offset=%s; point_z=%s; radius=%s; auto_wcs_adj=%s; wcs_2_z=%s;\n' % (offsets[2], point[2], radius, auto_wcs_adj, (z - radius + auto_wcs_adj)))}
            G10 L2 P3 Z{z - radius + auto_wcs_adj}
        {% else %}
            {action_raise_error('204: Error, tool length not enough for calculate wcs_2_y')}
        {% endif %}
    {% elif wcs == 1 %}
        ; Mode SPIRAL
        {% if radius < 5.0 and tool_length > 35.0 %}
            G10 L2 P3 Z{z - radius}
        {% else %}
            ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
            G10 L2 P3 Y{y}
            G10 L2 P2 Z{old_z - (y - old_y)}
        {% endif %}
    {% elif wcs == 2 %}
        ; set wcs_1_z and wcs_2_y(raw).
        ; FOR DEBUG
        {action_respond_info('\n-----------calculate wcs_1_z: probe_offset=%s; point_z=%s; auto_wcs_adj=%s; wcs_1_z=%s;\n' % (offsets[2], point[2], auto_wcs_adj, (z + auto_wcs_adj)))}
        G10 L2 P2 Z{z + auto_wcs_adj}
        G10 L2 P3 Y{old_y - (z - old_z)}
    {% elif wcs == 3 %}
        ; apply measuring for the set wcs_2_y
        G10 L2 P3 Y{y + probe_backlash_y}
    {% elif wcs == 4 %}
        {% set x = printer.auto_wcs.wcs[0][0]|float %}
        ; set wcs_1_x
        G10 L2 P2 X{x}
    {% elif wcs == 5 %}
        {% set y = printer.auto_wcs.wcs[0][1]|float %}
        ; set wcs_1_y
        G10 L2 P2 Y{y}
    {% elif wcs == 6 %}
        {% set x = printer.auto_wcs.wcs[1][0]|float %}
        ; set the wcs_2_x
        G10 L2 P3 X{x}
    {% elif wcs == 7 %}
        ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
        G10 L2 P3 Y{y}
        G10 L2 P2 Z{old_z - (y - old_y)}
    {% endif %}


[gcode_macro MOVE_AUTOCALIBRATE_FULL_V2]
description: macro do move for measuring and calculated WCS for FULL-SPIRALL mode. Sensor DAC_v_2
gcode:
    ; move for measuring wcs_1_z
    PROBE_TOOL_POINT POINT=A_Z
    ; set wcs_1_z, wcs_2_y(raw)
    ADJUST_BASEMENT_WCS WCS=2
    ; get tool length
    GET_TOOL_LENGTH
    ; moving for measure radius the tool
    TOOL_RADIUS MODE=full
    ; checking and apply offset for axis A
    ALIGN_A_AXIS_TOOL
    G0 Z150 F3600
    ; move for measuring the wcs_1_x
    PROBE_TOOL_POINT POINT=A_X
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MX
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=1 AXIS=0
    ; set wcs_1_x
    ADJUST_BASEMENT_WCS WCS=4
    ; move for measuring the wcs_1_y
    PROBE_TOOL_POINT POINT=A_Y
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MY
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=1 AXIS=1
    ; set wcs_1_y
    ADJUST_BASEMENT_WCS WCS=5
    ; move for measuring the wcs_2_y
    PROBE_TOOL_POINT POINT=A_Y_A90
    ; set wcs_2_y
    ADJUST_BASEMENT_WCS WCS=3
    ; move for measuring the wcs_2_x
    PROBE_TOOL_POINT POINT=A_X_A90
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MX_A90
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=2 AXIS=0
    ; set wcs_2_x
    ADJUST_BASEMENT_WCS WCS=6
    ; eccentricity correction
    APPLY_ECCENTRICITY
    ; check skew axis X
    CHECK_SKEW_TOOL
    ; move for measuring the wcs_2_z
    PROBE_TOOL_POINT POINT=A_Z_A90

[gcode_macro MOVE_AUTOCALIBRATE_SPIRAL_V2]
description: macro do move for measuring and calculated WCS for SPIRALL mode. Sensor DAC_v_2
gcode:
    ; move for measuring wcs_2_y
    PROBE
    G0 Z150 F3600
    ; set wcs_2_y and wcs_1_z(row)
    ADJUST_BASEMENT_WCS WCS=7
    ; calculate rough radius
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    GET_RADIUS_TOOLING ROUGH=1 MODE=spiral
    ; get tool length
    GET_TOOL_LENGTH
    ; move to calculate wcs by tool
    MOVE_MEASHURING_SPIRAL

[gcode_macro MOVE_MEASHURING_SPIRAL]
description: This macro do move and calculate wcs for SPIRAL mode.
gcode:
    {% set wcs = params.WCS %}
    {% set radius = printer.auto_wcs.tooling_radius %}
    {% set tool_length = printer['gcode_macro GET_TOOL_LENGTH'].tool_length|float %}
    {% if radius < 5.0 and tool_length > 35.0 %}
        ; checking and apply offset for axis A
        ALIGN_A_AXIS_TOOL
        ; moving for measure radius the tool
        TOOL_RADIUS MODE=spiral
        ; move for measuring the wcs_2_x
        PROBE_TOOL_POINT POINT=X_2_0 WCS=2
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        PROBE_TOOL_POINT POINT=X_2_1 WCS=2
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        CALC_WCS_TOOL WCS=2 AXIS=0
        ; set wcs_2_x
        ADJUST_BASEMENT_WCS WCS=6
        ; check skew axes
        CHECK_SKEW_TOOL
        ; move for measuring the wcs_2_z
        PROBE_TOOL_POINT POINT=Z_2_0 WCS=2
    {% else %}
        {action_respond_info("Radius greater than 5 mm or tool length less 35mm, movement to calculate wcs by tool is not available. Wcs will be calculated from the template.")}
    {% endif %}


[gcode_macro ALIGN_A_AXIS_TOOL]
description: align template along horizontal plane
variable_repeat: 2
gcode:
    {% set repeat = printer["gcode_macro ALIGN_A_AXIS_TOOL"].repeat %}
    {% for idx in range(repeat) %}
        PROBE_TOOL_POINT POINT=A_Z_A90
        SET_POINT MACRO=SAVE_A_AXIS_POINT POINT=0
        PROBE_TOOL_POINT POINT=B_Z_A90
        SET_POINT MACRO=SAVE_A_AXIS_POINT POINT=1
        CALC_A_AXIS_OFFSET
        {% if idx < repeat - 1 %}
            G91
            G0 C60 F3600
            G90
        {% endif %}
    {% endfor %}
    G92 C0

[gcode_macro CALC_TOOL_PARAMS]
description: Tool lendth and radius calculation
variable_length: 999.0
variable_radius: 999.0
gcode:
    {% if params.LENGTH|default(0) > 0 %}
        PROBE_TOOL_POINT POINT=A_Z
        SET_TOOL_LENGTH
    {% endif %}
    {% if params.RADIUS|default(0) > 0 %}
    {% endif %}

[gcode_macro SET_TOOL_LENGTH]
gcode:
    {% set template_thickness = 10.0 %}
    {% set auto_wcs_adj = printer.save_variables.variables["auto_wcs_adj"]|default(0.0)|float %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    # checking the axes that they are within the allowable range
    {% set home_min = printer.toolhead.axis_minimum %}
    {% set home_max = printer.toolhead.axis_maximum %}
    {% if x < home_min[0] or x > home_max[0] %}
        {action_raise_error('201: axis x=%f out of range (%f - %f)' %  (x, home_min[0], home_max[0]))}
    {% elif y < home_min[1] or y > home_max[1] %}
        {action_raise_error('202: axis y=%f out of range (%f - %f)' %  (y, home_min[1], home_max[1]))}
    {% elif z < home_min[2] or z > home_max[2] %}
        {action_raise_error('203: axis z=%f out of range (%f - %f)' %  (z, home_min[2], home_max[2]))}
    {% endif %}
    {% set tool_length = z - (old_z + template_thickness) %}
    G10 L2 P2 Z{z + auto_wcs_adj}
    G10 L2 P3 Y{old_y - (z - old_z)}


[gcode_macro GET_TOOL_LENGTH]
description: This macro calculate length tool.
variable_tool_length: 999.0
gcode:
    {% set old_y = printer.gcode_move.wcs_offsets[4][1] %}
    {% set template_thickness = 10.0 %}
    {% set wcs_2_y = printer.gcode_move.wcs_offsets[2][1] %}
    {% set tool_length = old_y + template_thickness - wcs_2_y %}
    SET_GCODE_VARIABLE MACRO=GET_TOOL_LENGTH VARIABLE=tool_length VALUE={tool_length}
    {action_respond_info('tool length=%s' % tool_length)}

[gcode_macro TOOL_RADIUS]
description: moved to measure tool radius and calculate it.
gcode:
    {% set mode = params.MODE %}
    {% if mode == 'full' %}
        PROBE_TOOL_POINT POINT=Y_1 WCS=1
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        GET_RADIUS_TOOLING ROUGH=1 MODE={mode}
        PROBE_TOOL_POINT POINT=X_1_0 WCS=1
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        PROBE_TOOL_POINT POINT=X_1_1 WCS=1
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=2
        GET_RADIUS_TOOLING MODE={mode}
    {% elif mode == 'spiral' %}
        PROBE_TOOL_POINT POINT=Z_2_0 WCS=2
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        PROBE_TOOL_POINT POINT=X_2_0 WCS=2
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        PROBE_TOOL_POINT POINT=X_2_1 WCS=2
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=2
        GET_RADIUS_TOOLING MODE={mode}
    {% endif %}

[gcode_macro MOVE_ACCURACY_SET_MODULE_FIVE_D]
Description: This macro do moved for accuracy set the module 5d.
gcode:
    G28 A
    M204 S500
    G0 C0.1
    G0 C0
    ADJUST_TEMPLATE_HEIGHT WCS=1

    PROBE_TEMPLATE_POINT POINT=AY
    SET_C_ALIGN_POINT POINT=0
    PROBE_TEMPLATE_POINT POINT=BY
    SET_C_ALIGN_POINT POINT=1
    CALC_C_AXIS_ALIGN

    PROBE_TEMPLATE_POINT POINT=O_1
    SET_A_OFFSET_POINT POINT=0
    PROBE_TEMPLATE_POINT POINT=CZ
    SET_A_OFFSET_POINT POINT=1
    CALC_A_AXIS_OFFSET

    PROBE_TEMPLATE_POINT POINT=AZ
    SET_SKEW_COMPENSATION_POINT POINT=0
    PROBE_TEMPLATE_POINT POINT=BZ
    SET_SKEW_COMPENSATION_POINT POINT=1
    PROBE_TEMPLATE_POINT POINT=YZ2
    SET_SKEW_COMPENSATION_POINT POINT=2
    PROBE_TEMPLATE_POINT POINT=YZ3
    SET_SKEW_COMPENSATION_POINT POINT=3
    CHECK_ACCURACY_SET_MODULE_FIVE_D

[gcode_macro CHECK_SKEW_TOOL]
description: This macro calculates the x-axis skew between four points using the average.
gcode:
    {% set tool_length = printer['gcode_macro GET_TOOL_LENGTH'].tool_length|float %}
    {% if printer.save_variables.variables.measure_skew|default(0)|int %}
        CALC_SKEW_COMPENSATION_WCS FACTOR=XY
        CALC_SKEW_COMPENSATION_WCS FACTOR=XZ
        CALC_SKEW_COMPENSATION_WCS FACTOR=YZ
        SKEW_PROFILE SAVE=module_5d
        {% if tool_length > 50.0 %}
            G0 Z150 F3600
            PROBE_TOOL_POINT POINT=X_2_0 WCS=2
            SET_SKEW_COMPENSATION_POINT POINT=2
            PROBE_TOOL_POINT POINT=X_2_2 WCS=2
            SET_SKEW_COMPENSATION_POINT POINT=0
            PROBE_TOOL_POINT POINT=X_2_4 WCS=2
            SET_SKEW_COMPENSATION_POINT POINT=3
            PROBE_TOOL_POINT POINT=X_2_5 WCS=2
            SET_SKEW_COMPENSATION_POINT POINT=1
            CALC_SKEW_COMPENSATION FACTOR=XY MSG=skew_calculate_by_tool
            SKEW_PROFILE SAVE=module_5d
        {% else %}
            {action_respond_info('Warning, tool length less 50mm for calculate skew for the axis X, where use only wcs_2 points!')}
        {% endif %}
    {% else %}
        {action_respond_info('Skew compensation measurement disabled.')}
    {% endif %}

[gcode_macro SET_ECCENTRICITY]
Description: This macro save eccentricity for wcs_1.
gcode:
    {% set x1 = params.X1|default(-1.0)|float %}
    {% set x2 = params.X2|default(-1.0)|float %}
    {% set y1 = params.Y1|default(-1.0)|float %}
    {% set y2 = params.Y2|default(-1.0)|float %}
    {% if x1 >= 0.0 and x2 >= 0.0 %}
        {% set offset_x = (x2 - x1) / 2.0 %}
        SAVE_VARIABLE VARIABLE=eccentricity_offset_x VALUE={offset_x}
        {action_respond_info('offset_x=%.3f; for correcting ECCENTRICITY saved! Please use calibrate mode "auto calibrate the start point" for apply this params.' % offset_x)}
    {% endif %}
    {% if y1 >= 0.0 and y2 >= 0.0 %}
        {% set offset_y = (y1 - y2) / 2.0 %}
        SAVE_VARIABLE VARIABLE=eccentricity_offset_y VALUE={offset_y}
        {action_respond_info('offset_y=%.3f; for correcting ECCENTRICITY saved! Please use calibrate mode "auto calibrate the start point" for apply this params.' % offset_y)}
    {% endif %}

[gcode_macro APPLY_ECCENTRICITY]
Description: This macro apply eccentricity correction for wcs_1 and wcs_2 to axes XY.
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set offset_x = svv.eccentricity_offset_x|default(0.0)|float %}
    {% set offset_y = svv.eccentricity_offset_y|default(0.0)|float %}
    {% set old_wcs1_x = printer.gcode_move.wcs_offsets[1][0] %}
    {% set old_wcs1_y = printer.gcode_move.wcs_offsets[1][1] %}
    {% set old_wcs2_x = printer.gcode_move.wcs_offsets[2][0] %}
    {% set old_wcs2_y = printer.gcode_move.wcs_offsets[2][1] %}
    {% set new_wcs1_x = old_wcs1_x + offset_x %}
    {% set new_wcs1_y = old_wcs1_y + offset_y %}
    {% set new_wcs2_x = old_wcs2_x + offset_x %}
    {% set new_wcs2_y = old_wcs2_y + offset_y %}
    G10 L2 P2 R1 X{offset_x}
    G10 L2 P2 R1 Y{offset_y}
    G10 L2 P3 R1 X{offset_x}
    G10 L2 P3 R1 Y{offset_y}
    {action_respond_info('Old wcs_2_x=%.3f, wcs_2_y=%.3f. New wcs_2_x=%.3f, wcs_2_y=%.3f' % (old_wcs2_x, old_wcs2_y, new_wcs2_x, new_wcs2_y))}
    {action_respond_info('Old wcs_1_x=%.3f, wcs_1_y=%.3f. New wcs_1_x=%.3f, wcs_1_y=%.3f' % (old_wcs1_x, old_wcs1_y, new_wcs1_x, new_wcs1_y))}
    {action_respond_info('Applied offset for corrective eccentricity. offset_x=%.3f; offset_y=%.3f.' % (offset_x, offset_y))}
    SAVE_VARIABLES


#probe_tool section end

