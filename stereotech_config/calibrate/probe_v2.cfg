[gcode_macro AUTO_WCS_OFFSET_V2]
description: macro do move for measuring and calculated WCS. Sensor DAC_v_2
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        # wcs_1_z
        PROBE_TEMPLATE_POINT POINT=A_Z
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        # wcs_1_x
        PROBE_TEMPLATE_POINT POINT=C_X
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=D_MX
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=3
        # wcs_1_y
        PROBE_TEMPLATE_POINT POINT=B_Y_A0_C30
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        GET_APPROXIMATE_Y   # calculate approximate wcs_1_y
        PROBE_TEMPLATE_POINT POINT=B_MY_A0_C30
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=7
        # wcs_2_z
        PROBE_TEMPLATE_POINT POINT=A_Z_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=4
        # wcs_2_y
        PROBE_TEMPLATE_POINT POINT=B_Y_A90_C60
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=B_MY_A90_C60
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=6
        # wcs_2_x
        PROBE_TEMPLATE_POINT POINT=D_MX_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=8
        PROBE_TEMPLATE_POINT POINT=C_X_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=9
        # calculating wcs
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.0)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION=1
    {% endif %}

[gcode_macro AUTO_BASEMENT_WCS_V2]
description: macro do main moves for get wcs for SPIRAL and FULL modes.
gcode:
    RESET_WCS
    SET_GCODE_VARIABLE MACRO=CALC_TOOL_PARAMS VARIABLE=length VALUE=999.0
    SET_GCODE_VARIABLE MACRO=CALC_TOOL_PARAMS VARIABLE=radius VALUE=999.0
    {% set wcs = params.WCS|default(0)|int %}
    {% if wcs == 0 %}
        MOVE_AUTOCALIBRATE_FULL_V2
    {% else %}
        MOVE_AUTOCALIBRATE_SPIRAL_V2
    {% endif %}
    SET_GCODE_VARIABLE MACRO=CALC_TOOL_PARAMS VARIABLE=length VALUE=999.0
    SET_GCODE_VARIABLE MACRO=CALC_TOOL_PARAMS VARIABLE=radius VALUE=999.0

[gcode_macro MOVE_AUTOCALIBRATE_FULL_V2]
description: macro do move for measuring and calculated WCS for FULL-SPIRAL mode. Sensor DAC_v_2
gcode:
    {% set max_z = printer.toolhead.axis_maximum[2]|float %}
    ; set approximate radius, length and measuring the wcs_1_z
    CALC_TOOL_PARAMS LENGTH=1 APPROXIMATE_RADIUS=1
    ; checking and apply offset for axis A
    ALIGN_A_AXIS_TOOL
    ; move for measuring the wcs_2_y
    PROBE_TOOL_POINT POINT=A_Y_A90
    ADJUST_BASEMENT_WCS_V2 WCS=2
    ; move for measuring the wcs_2_x
    PROBE_TOOL_POINT POINT=A_X_A90
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MX_A90
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=2 AXIS=0 ADJUST=1
    ; set radius and measuring the wcs_2_z
    CALC_TOOL_PARAMS APPROXIMATE_RADIUS=1 RADIUS=1
    ; move for measuring the wcs_1_x
    PROBE_TOOL_POINT POINT=A_X
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MX
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=1 AXIS=0 ADJUST=1
    ; move for measuring the wcs_1_y
    PROBE_TOOL_POINT POINT=A_Y
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
    PROBE_TOOL_POINT POINT=A_MY
    SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
    CALC_WCS_TOOL WCS=1 AXIS=1 ADJUST=1
    ; eccentricity correction
    APPLY_ECCENTRICITY
    ; check skew axis X
    CHECK_SKEW_TOOL

[gcode_macro MOVE_AUTOCALIBRATE_SPIRAL_V2]
description: macro do move for measuring and calculated WCS for SPIRAL mode. Sensor DAC_v_2
gcode:
    {% set max_z = printer.toolhead.axis_maximum[2]|float %}
    PROBE
    G91
    G1 Z25 F1500
    G90
    ; set the wcs_1_z and wcs_2_y
    ADJUST_BASEMENT_WCS_V2 WCS=1
    ; set approximate radius and length
    CALC_TOOL_PARAMS LENGTH=1 APPROXIMATE_RADIUS=1 LEN_PROBE=0 APPROXIMATE_RADIUS_PROBE=0
    ; move to calculate wcs by tool
    MOVE_MEASURING_SPIRAL

[gcode_macro MOVE_MEASURING_SPIRAL]
description: This macro do move and calculate wcs for SPIRAL mode.
gcode:
    {% set radius = printer['gcode_macro CALC_TOOL_PARAMS'].radius|float %}
    {% set tool_length = printer['gcode_macro CALC_TOOL_PARAMS'].length|float %}
    {% if radius < 5.0 and tool_length > 35.0 %}
        ; checking and apply offset for axis A
        ALIGN_A_AXIS_TOOL
        ; move for measuring the wcs_2_x
        PROBE_TOOL_POINT POINT=A_X_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=0
        PROBE_TOOL_POINT POINT=A_MX_A90
        SET_POINT MACRO=SAVE_WCS_CALC_POINT POINT=1
        CALC_WCS_TOOL WCS=2 AXIS=0 ADJUST=1
        ; set precise radius and set the wcs_2_z
        CALC_TOOL_PARAMS APPROXIMATE_RADIUS=1 RADIUS=1
        ; check skew axes
        CHECK_SKEW_TOOL
    {% else %}
        {action_respond_info("Radius greater than 5 mm or tool length less 35mm, movement to calculate wcs by tool is not available. Wcs will be calculated from the template.")}
    {% endif %}

[gcode_macro ADJUST_BASEMENT_WCS_V2]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    {% set probe_backlash_y = printer.auto_wcs.probe_backlash_y|default(0.0)|float %}
    {% set tool_length = printer['gcode_macro CALC_TOOL_PARAMS'].length|float %}
    {% set radius = printer['gcode_macro CALC_TOOL_PARAMS'].radius %}
    {% set auto_wcs_adj = printer.save_variables.variables["auto_wcs_adj"]|default(0.0)|float %}
    {% if wcs == 0 %}
        G10 L2 P2 Z{z + auto_wcs_adj}
        G10 L2 P3 Y{old_y - (z - old_z)}
    {% elif wcs == 1 %}
        G10 L2 P3 Y{y}
        G10 L2 P2 Z{old_z - (y - old_y)}
    {% elif wcs == 2 %}
        G10 L2 P3 Y{y + probe_backlash_y}
    {%  elif wcs == 3 %}
        G10 L2 P3 Z{z - radius + auto_wcs_adj}
    {% endif %}
