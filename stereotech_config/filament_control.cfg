[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 14.0
event_delay: 120.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        {action_respond_info('----------trigered first extruder')}
        SAVE_GCODE_STATE NAME=extruder_sensor
        OFFSET_FOR_NOZZLE ACTION=reset
        SAVE_GCODE_STATE NAME=PAUSE_STATE
        MOVE_TO_SERVICE_POSITION
        G91
        G0 E15 F600
        G90
        CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'
        SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder VALUE=1

        {% if triggered_extruder + triggered_extruder_old == 3 %} ; we are back to the main extruder from gcode
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=0
            {action_respond_info('----------enabled == 0')}
        {% else %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=1
            {action_respond_info('----------enabled == 1')}
        {% endif %}
        {% if printer["gcode_macro OFFSET_FOR_NOZZLE"].triggered_extruder_old|int == 0 %}
            {action_respond_info('---------- triggered_extruder_old == 1')}
           SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder_old VALUE={ triggered_extruder }
        {% endif %}

        UPDATE_DELAYED_GCODE ID=TURN_ON_ANOTHER_EXTRUDERS_DELAYED DURATION=30

    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR|default('extruder_sensor') %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if filament_detected %}
        { action_respond_info('------------filament_detected==1') }
        ; RESTORE_GCODE_STATE NAME={sensor} MOVE=1 MOVE_SPEED=30
    {% else %}
        { action_respond_info('------------filament_detected==0') }
        ;PAUSE TURN_OFF_EXTRUDERS=0 SAVE_GCODE_STATE=0
        ;UPDATE_DELAYED_GCODE ID=TURN_OFF_EXTRUDERS_DELAYED DURATION=30
    {% endif %}
    PAUSE TURN_OFF_EXTRUDERS=0 SAVE_GCODE_STATE=0
    UPDATE_DELAYED_GCODE ID=TURN_OFF_EXTRUDERS_DELAYED DURATION=20

[gcode_macro MOVE_TO_SERVICE_POSITION]
description: move in position for service
gcode:

    {% if printer.toolhead.axis_maximum[0] > 250 %}
            {% set x = params.X|default(300) %}
            {% set y = params.Y|default(10) %}
    {% else %}
            {% set x = params.X|default(200) %}
            {% set y = params.Y|default(10) %}
    {% endif %}
    {% set z = params.Z|default(50)|float %}
    {% set e = params.E|default(3) %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% set fan_speed = printer.fan.speed * 255 | int %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
        {% endif %}
    {% if z_safe < 0 %}
        {% set z_safe = 0 %}
    {% endif %}
    {% if printer.probe %}
        {% if printer["gcode_button five_axis_module"].state == "RELEASED" %}
            BED_MESH_CLEAR
        {% else %}
            ;FIVE AXIS COMPENSATION OFF
            ;B_AXIS_COMPENSATION_VARS ENABLE=0
        {% endif %}
    {% endif %}
    G54
    G91
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        CUT_FIBER
        G1 E-{e} F1200
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe}
        G90
        G1 X{x} Y{y} F3600
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}


[gcode_macro TURN_ON_ANOTHER_EXTRUDERS]
gcode:
    {% if printer.pause_resume.is_paused|lower == 'true' and printer["filament_motion_sensor extruder1_sensor"] %}
        {% set current_extruder = printer["gcode_macro PAUSE"].current_extruder|int %}
        {% set can_extrude0 = printer['filament_motion_sensor extruder_sensor'].filament_detected|lower %}
        {% set can_extrude1 = printer['filament_motion_sensor extruder1_sensor'].filament_detected|lower %}
        {% if current_extruder == 1 and can_extrude0 == 'true' %}
            ;if second extruder ended filament
            {action_respond_info('----------second extruder ended filament')}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=0
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={printer["gcode_macro PAUSE"].extruder1_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE=0
            RESUME
        {% elif current_extruder == 0 and can_extrude1 == 'true' %}
            ;elif main extruder ended filament
            {action_respond_info('----------main extruder ended filament')}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
            RESUME
        {% else %}
            { action_raise_error('It is not possible to continue printing with extruder%d, there is no filament in it.' % current_extruder) }
            CANCEL_PRINT
        {% endif %}
        
    {% endif %}

[gcode_macro OFFSET_FOR_NOZZLE]
variable_triggered_extruder: 0
variable_triggered_extruder_old: 0
variable_offset_apply: 0
variable_enabled: 0
gcode:
    {% if printer["gcode_macro OFFSET_FOR_NOZZLE"].enabled|int == 1 %}
        {% set action = params.ACTION %}
        {% set triggered_extruder = printer["gcode_macro OFFSET_FOR_NOZZLE"].triggered_extruder|int %}
        {% set offset_apply = printer["gcode_macro OFFSET_FOR_NOZZLE"].offset_apply|int %}
        
        { action_respond_info('----------------action=%s.' % action) }
       
        {% if action == 'set' and offset_apply == 0 %}
            {% if triggered_extruder == 1 %}
                {action_respond_info('----------set extruder  1')}
                SET_GCODE_OFFSET X_ADJUST=-25.0
            {% elif triggered_extruder == 2 %}
                {action_respond_info('----------set extruder')}
                SET_GCODE_OFFSET X_ADJUST=25.0
            {% endif %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=1


        {% elif action == 'reset' and offset_apply == 1 %}
            {% if triggered_extruder == 1 %} ; if the first extruder triggered, then the second extruder was printing
                {action_respond_info('----------reset triggered_extruder == 0')}
                SET_GCODE_OFFSET X_ADJUST=25.0
            {% elif triggered_extruder == 2 %}
                {action_respond_info('----------reset triggered_extruder == 1')}
                SET_GCODE_OFFSET X_ADJUST=-25.0
            {% endif %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=0
        {% endif %}
    {% else %}
        {action_respond_info('The function to continue printing with other extruders is disabled ')}
    {% endif %}

[gcode_macro RESET_VARIABLE_FILAMENT_CONTROL]
gcode:
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=0
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=0
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder_old VALUE=0
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder VALUE=0

[delayed_gcode TURN_ON_ANOTHER_EXTRUDERS_DELAYED]
gcode:
    TURN_ON_ANOTHER_EXTRUDERS


