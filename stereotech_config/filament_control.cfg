[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 14.0
event_delay: 120.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        { action_respond_info('extruder_sensor0----------------------!!!') }
        SAVE_GCODE_STATE NAME=extruder_sensor
        SAVE_GCODE_STATE NAME=PAUSE_STATE
        MOVE_TO_SERVICE_POSITION
        G91
        G0 E15 F600
        G90
        CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'

        # UPDATE_DELAYED_GCODE ID=TURN_ON_ANOTHER_EXTRUDERS_DELAYED DURATION=100

        

        
        ;SAVE_GCODE_STATE NAME=extruder_sensor
        ;MOVE_TO_SERVICE_POSITION
        ;{% set extruder_temp = printer.extruder.target %}
        ;T1
        ;M104 T0 S0
        ;M104 S{extruder_temp}
        ;M109 S{extruder_temp}
        ;G92 E0
        ;G1 F200 E15 ;extrude 15 mm of feed stock
        ;G1 F200 E13.5 ;make retraction
        ;G92 E0 ;zero 
        ;SET_GCODE_OFFSET X_ADJUST=-25.0  ! - no work

        # RESTORE_GCODE_STATE NAME=extruder_sensor MOVE=1 MOVE_SPEED=30
        # SET_GCODE_OFFSET X_ADJUST=-25.0
        # SET_GCODE_OFFSET X_ADJUST={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_x|default(0.0)} Y_ADJUST={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_y|default(0.0)}


        # G91
        # G0 E15 F600
        # G90
        # CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'


    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR|default('extruder_sensor') %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if filament_detected %}
        RESTORE_GCODE_STATE NAME={sensor} MOVE=1 MOVE_SPEED=30
    {% else %}
        PAUSE TURN_OFF_EXTRUDERS=0 SAVE_GCODE_STATE=0
        UPDATE_DELAYED_GCODE ID=TURN_OFF_EXTRUDERS_DELAYED DURATION=300
    {% endif %}

[gcode_macro MOVE_TO_SERVICE_POSITION]
description: move in position for service
gcode:
    {% if printer.toolhead.axis_maximum[0] > 250 %}
            {% set x = params.X|default(300) %}
            {% set y = params.Y|default(10) %}
        {% else %}
            {% set x = params.X|default(200) %}
            {% set y = params.Y|default(10) %}
        {% endif %}
        {% set z = params.Z|default(50)|float %}
        {% set e = params.E|default(3) %}
        {% set max_z = printer.toolhead.axis_maximum.z|float %}
        {% set act_z = printer.toolhead.position.z|float %}
        {% set lift_z = z|abs %}
        {% set fan_speed = printer.fan.speed * 255 | int %}
        {% if act_z < (max_z - lift_z) %}
            {% set z_safe = lift_z %}
        {% else %}
            {% set z_safe = max_z - act_z %}
        {% endif %}
        {% if z_safe < 0 %}
            {% set z_safe = 0 %}
        {% endif %}
        {% if printer.probe %}
            {% if printer["gcode_button five_axis_module"].state == "RELEASED" %}
                BED_MESH_CLEAR
            {% else %}
                ;FIVE AXIS COMPENSATION OFF
                ;B_AXIS_COMPENSATION_VARS ENABLE=0
            {% endif %}
        {% endif %}
        G54
        G91
        {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
            CUT_FIBER
            G1 E-{e} F1200
        {% else %}
            {action_respond_info("Extruder not hot enough")}
        {% endif %}
        {% if "xyz" in printer.toolhead.homed_axes %}
            G1 Z{z_safe}
            G90
            G1 X{x} Y{y} F3600
        {% else %}
            {action_respond_info("Printer not homed")}
        {% endif %}


[gcode_macro TURN_ON_ANOTHER_EXTRUDERS]
gcode:
    { action_respond_info('TURN_ON_ANOTHER_EXTRUDERS----------------------!!!') }
    {% if printer.pause_resume.is_paused %}
        ; if is paused
        ; if extruder can extrusion
        {% if printer["gcode_macro PAUSE"].current_extruder and printer['filament_motion_sensor extruder_sensor'].filament_detected %}
            ;if second extruder ended filament
            { action_respond_info('1----------------------!!!') }
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={printer["gcode_macro PAUSE"].extruder1_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=0
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE=0
        {% elif printer['filament_motion_sensor extruder1_sensor'].filament_detected %}
            ;if main extruder ended filament
            { action_respond_info('2----------------------!!!') }
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
        {% endif %}
        { action_respond_info('3----------------------!!!') }
        RESUME
        # M400
        # SET_GCODE_OFFSET X_ADJUST=-25.0
        # SET_GCODE_OFFSET X_ADJUST={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_x|default(0.0)} Y_ADJUST={printer["gcode_macro SET_NOZZLE_OFFSET"].offset_y|default(0.0)}
        { action_respond_info('4----------------------!!!') }
    {% endif %}

[delayed_gcode TURN_ON_ANOTHER_EXTRUDERS_DELAYED]
gcode:
    { action_respond_info('TURN_ON_ANOTHER_EXTRUDERS_DELAYED----------------------!!!') }
    TURN_ON_ANOTHER_EXTRUDERS
