[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 10.5
event_delay: 60.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        M117 trigered_filament_sensor0
        {action_respond_info('The filament has run out or there is a problem with its supply at the Extruder0.')}
        PAUSE TURN_OFF_EXTRUDERS=0 E=0
        TRY_DO_EXTRUDE SENSOR='extruder_sensor'
        CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'
    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro TRY_DO_EXTRUDE]
variable_retries_count: 1
gcode:
    {% set sensor = params.SENSOR %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
        M400
        G4 P3000
        M117 try_do_extrude
        EXTRUDE_WHITH_CURENT_TEMP
        M400
        G4 P3000
        EXTRUDE_WHITH_COLLING_AND_HEAT SENSOR={sensor}
    {% else %}
        {action_respond_info('Extruder not heat enough!')}
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if filament_detected %}
        {action_respond_info('Extruding attempt completed successfully, resuming printing.')}
        M117 resume_after_trigered_sensor
        RESUME
    {% else %}
        M117 failed_try_do_extrude
        {action_respond_info('All extruding attempt completed failed.')}
        {% if sensor == 'extruder_sensor' %}
            SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=0
        {% elif sensor == 'extruder1_sensor' %}
            SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=1
        {% endif %}
        UPDATE_DELAYED_GCODE ID=CHECK_PRINT_CONTINUE_DELAYED DURATION=300
    {% endif %}

[delayed_gcode CHECK_PRINT_CONTINUE_DELAYED]
gcode:
    {% if printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].enabled|int > 0 %}
        {action_respond_info('Function "continue printing with another extruder" is enabled')}
        CONTINUE_PRINT_WITH_EXTRUDER
    {% else %}
        {action_respond_info('Function "continue printing with another extruder" is disabled. Turn off all extruder')}
        TURN_OFF_EXTRUDERS
    {% endif %}

[gcode_macro CONTINUE_PRINT_WITH_EXTRUDER]
variable_enabled: 0
variable_triggered_extruder: -1
gcode:
    ; cheked on the printer is pause and check what the printer name is hybrid(get objekt extruder1_sensor).
    {% if printer.pause_resume.is_paused and printer["filament_motion_sensor extruder1_sensor"] %}
        {% set triggered_extruder = printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].triggered_extruder|int %}
        {% if triggered_extruder == 0 %}
            {action_respond_info('Printing continued with extruder 2.')}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
            SET_GCODE_VARIABLE MACRO=SET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_set VALUE=1
            RESUME
        {% elif triggered_extruder == 1 %}
            {action_respond_info('Continue printing with extruder0 fails because this function is not available.')}
            {action_respond_info('Turn off all extruder')}
            TURN_OFF_EXTRUDERS
            SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=-1
        {% else %}
            {action_respond_info('Turn off all extruder')}
            TURN_OFF_EXTRUDERS
        {% endif %}
    {% endif %}

[gcode_macro RESET_CONTINUE_PRINT_WITH_EXTRUDER]
variable_needed_reset: 0
gcode:
    {% if printer["gcode_macro RESET_CONTINUE_PRINT_WITH_EXTRUDER"].needed_reset > 0 %}
        {action_respond_info('Reset offset.')}
        SET_GCODE_OFFSET X_ADJUST=25.0 MOVE=1
        ENABLE_CONSTRAIN ENABLE=0
        SET_GCODE_VARIABLE MACRO=SET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_set VALUE=1
        SET_GCODE_VARIABLE MACRO=RESET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_reset VALUE=0
    {% endif %}
    {% if params.RESET_VARIABLES|default(0) > 0 %}
        {action_respond_info('Reset variable.')}
        SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=enabled VALUE=0
        SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=-1
        SET_GCODE_VARIABLE MACRO=SET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_set VALUE=0
        SET_GCODE_VARIABLE MACRO=RESET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_reset VALUE=0
    {% endif %}

[gcode_macro SET_CONTINUE_PRINT_WITH_EXTRUDER]
variable_needed_set: 0
gcode:
    {% if printer["gcode_macro SET_CONTINUE_PRINT_WITH_EXTRUDER"].needed_set|int > 0 %}
        {action_respond_info('An offset is set to continue printing on another extruder.')}
        SET_GCODE_OFFSET X_ADJUST=-25.0 MOVE=1
        ;if an offset is added, movement beyond coord_min is possible, you need to enable the coordinate limit for movement in the tolhead module
        ENABLE_CONSTRAIN ENABLE=1
        SET_GCODE_VARIABLE MACRO=RESET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_reset VALUE=1
        SET_GCODE_VARIABLE MACRO=SET_CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=needed_set VALUE=0
    {% endif %}

[gcode_macro EXTRUDE_WHITH_CURENT_TEMP]
description: Trying to extrude the filament.
gcode:
    {% for attempt in range(printer["gcode_macro TRY_DO_EXTRUDE"].retries_count|int) %}
        {action_respond_info('Attempt to extrude the filament.')}
        G91
        G0 E20 F600
        G90
    {% endfor %}

[gcode_macro EXTRUDE_WHITH_COLLING_AND_HEAT]
description: Trying to extrude the filament after the extruder has cooled down.
gcode:
    {% set sensor = params.SENSOR %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if not filament_detected %}
        {action_respond_info('Attempt to extrude the filament is failed.')}
        {% if sensor == 'extruder_sensor' %}
            {action_respond_info('Cooling and heat extruder0.')}
            {% set temp_extruder = printer["gcode_macro PAUSE"].extruder_temp|int %}
            M117 cooling_extruder
            M109 T0 S50
            M117 heat_extruder
            M109 T0 S{temp_extruder}
        {% elif sensor == 'extruder1_sensor' %}
            {action_respond_info('Cooling and heat extruder1.')}
            {% set temp_extruder = printer["gcode_macro PAUSE"].extruder1_temp|int %}
            M117 cooling_extruder
            M109 T1 S50
            M117 heat_extruder
            M109 T1 S{temp_extruder}
        {% endif %}
        {% for attempt in range(printer["gcode_macro TRY_DO_EXTRUDE"].retries_count|int) %}
            {action_respond_info('Attempt to extrude the filament after cooling.')}
            G91
            G0 E20 F600
            G90
        {% endfor %}
        M400
        G4 P3000
    {% endif %}
