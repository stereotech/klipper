[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 14.0
event_delay: 120.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        {action_respond_info('The filament has run out or there is a problem with its supply at the Extruder 1.')}
        PAUSE TURN_OFF_EXTRUDERS=0 E=0
        TRY_DO_EXTRUDE
        CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'
    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro TRY_DO_EXTRUDE]
variable_retries_count: 1
gcode:
    {% if printer[printer.toolhead.extruder].can_extrude %}
        {% for attempt in range(printer["gcode_macro TRY_DO_EXTRUDE"].retries_count|int) %}
            G91
            G0 E15 F600
            G90
        {% endfor %}
    {% else %}
        {action_respond_info('Extruder not heat enough!')}
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR|default('extruder_sensor') %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if filament_detected %}
        RESUME
    {% else %}
        {% if sensor == 'extruder_sensor' %}
            SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=0
        {% elif sensor == 'extruder1_sensor' %}
            ;SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=1
        {% endif %}
        UPDATE_DELAYED_GCODE ID=CHECK_PRINT_CONTINUE_DELAYED DURATION=300
    {% endif %}

[delayed_gcode CHECK_PRINT_CONTINUE_DELAYED]
gcode:
    {% if printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].enabled|int > 0 %}
        CONTINUE_PRINT_WITH_EXTRUDER
    {% else %}
        TURN_OFF_EXTRUDERS
    {% endif %}

[gcode_macro CONTINUE_PRINT_WITH_EXTRUDER]
variable_enabled: 0
variable_triggered_extruder: -1
gcode:
    {% if printer.pause_resume.is_paused and printer["filament_motion_sensor extruder1_sensor"] %}
        {% set triggered_extruder = printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].triggered_extruder|int %}
        {% if triggered_extruder == 0 %}
            {action_respond_info('Printing continued with extruder2.')}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
            RESUME
        {% else %}
            TURN_OFF_EXTRUDERS
        {% endif %}
    {% endif %}

[gcode_macro RESET_CONTINUE_PRINT_WITH_EXTRUDER]
gcode:
    {% set triggered_extruder = printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].triggered_extruder|int %}
    {% set enabled = printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].enabled %}
    {% if params.RESET_OFFSET|default(0) > 0 and enabled > 0 and triggered_extruder == 0 %}
        SET_GCODE_OFFSET X_ADJUST=25.0 MOVE=1
        ENABLE_CONSTRAIN ENABLE=0
    {% endif %}
    {% if params.RESET_VARIABLES|default(0) > 0 %}
        SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=enabled VALUE=0
        SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_WITH_EXTRUDER VARIABLE=triggered_extruder VALUE=-1
    {% endif %}

[gcode_macro SET_CONTINUE_PRINT_WITH_EXTRUDER]
gcode:
    {% set triggered_extruder = printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].triggered_extruder|int %}
    {% if printer["gcode_macro CONTINUE_PRINT_WITH_EXTRUDER"].enabled|int > 0 and triggered_extruder == 0 %}
        SET_GCODE_OFFSET X_ADJUST=-25.0 MOVE=1
        ;if an offset is added, movement beyond coord_min is possible, you need to enable the coordinate limit for movement in the tolhead module
        ENABLE_CONSTRAIN ENABLE=1
    {% endif %}
