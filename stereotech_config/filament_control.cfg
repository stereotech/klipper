[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 14.0
event_delay: 120.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        {action_respond_info('The filament has run out or there is a problem with its supply at the Extruder 1.')}
        PAUSE TURN_OFF_EXTRUDERS=0 E=0
        G91
        G0 E15 F600
        G90
        M400
        CHECK_FILAMENT_MOTION_SENSOR SENSOR='extruder_sensor'
    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR|default('extruder_sensor') %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected|lower %}
    {% if filament_detected == 'true' %}
        RESUME
    {% elif filament_detected == 'false' %}
        {% if sensor == 'extruder_sensor' %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder VALUE=0
        {% elif sensor == 'extruder1_sensor' %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder VALUE=1
        {% endif %}
        UPDATE_DELAYED_GCODE ID=TURN_OFF_EXTRUDERS_DELAYED DURATION=300
        UPDATE_DELAYED_GCODE ID=TURN_ON_ANOTHER_EXTRUDERS_DELAYED DURATION=310
    {% endif %}

[gcode_macro TURN_ON_ANOTHER_EXTRUDERS]
gcode:
    {% if printer.pause_resume.is_paused|lower == 'true' and printer["filament_motion_sensor extruder1_sensor"] %}
        {% set can_extrude_ex0 = printer['filament_motion_sensor extruder_sensor'].filament_detected|lower %}
        {% set can_extrude_ex1 = printer['filament_motion_sensor extruder1_sensor'].filament_detected|lower %}
        {% set triggered_extruder = printer["gcode_macro OFFSET_FOR_NOZZLE"].triggered_extruder|int %}
        {% set triggered_extruder_old = printer["gcode_macro OFFSET_FOR_NOZZLE"].triggered_extruder_old|int %}

        SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=1

        {% if triggered_extruder_old == 11 %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder_old VALUE={triggered_extruder} ; install main extruder which is specified by gcode
        {% endif %}
        {% if triggered_extruder_old + triggered_extruder == 1 %} ; we are back to extruder which is specified by gcode
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=0
        {% endif %}
        {% if triggered_extruder == 1 and can_extrude_ex0 == 'true' %}
            ;if second extruder ended filament
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=0
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={printer["gcode_macro PAUSE"].extruder1_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE=0
            RESUME
        {% elif triggered_extruder == 0 and can_extrude_ex1 == 'true' %}
            ;elif main extruder ended filament
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
            SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
            RESUME
        {% else %}
            {action_respond_info('It is not possible to continue printing with anouther extruder, there is no filament in it.')}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=0
        {% endif %}
    {% endif %}

[gcode_macro OFFSET_FOR_NOZZLE]
variable_triggered_extruder: 11
variable_triggered_extruder_old: 11
variable_offset_apply: 0
variable_enabled: 0
gcode:
    {% set action = params.ACTION %}
    {% set triggered_extruder = printer["gcode_macro OFFSET_FOR_NOZZLE"].triggered_extruder|int %}
    {% set offset_apply = printer["gcode_macro OFFSET_FOR_NOZZLE"].offset_apply|int %}
    {% set enabled = printer["gcode_macro OFFSET_FOR_NOZZLE"].enabled|int %}
    {% if enabled == 1 %}
        {% if action == 'set' and offset_apply == 0 %}
            {% if triggered_extruder == 0 %} ; if the first extruder triggered, then the second extruder was printing
                SET_GCODE_OFFSET X_ADJUST=-25.0
            {% elif triggered_extruder == 1 %}
                SET_GCODE_OFFSET X_ADJUST=25.0
            {% endif %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=1
            FILAMENT_MOTION_SENSOR TRIGGERED=1
        {% elif action == 'reset' and offset_apply == 1 %}
            {% if triggered_extruder == 0 %} ; if the first extruder triggered, then the second extruder was printing
                SET_GCODE_OFFSET X_ADJUST=25.0
            {% elif triggered_extruder == 1 %}
                SET_GCODE_OFFSET X_ADJUST=-25.0
            {% endif %}
            SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=0
            FILAMENT_MOTION_SENSOR TRIGGERED=0
        {% endif %}
    {% else %}
    {% endif %}

[gcode_macro RESET_VARIABLE_FILAMENT_CONTROL]
gcode:
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=enabled VALUE=0
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=offset_apply VALUE=0
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder_old VALUE=11
    SET_GCODE_VARIABLE MACRO=OFFSET_FOR_NOZZLE VARIABLE=triggered_extruder VALUE=11

[delayed_gcode TURN_ON_ANOTHER_EXTRUDERS_DELAYED]
gcode:
    TURN_ON_ANOTHER_EXTRUDERS
