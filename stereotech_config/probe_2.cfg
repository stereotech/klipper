[probe]
pin: !PG13
samples: 4
samples_tolerance_retries: 1
samples_result: median
lift_speed: 10.0
x_offset: -40.0
y_offset: -34.0
z_offset: 0.0

[skew_correction]
[b_axis_compensation]

[bed_mesh]
speed: 120
horizontal_move_z: 50
mesh_min: 20, 20
mesh_max: 261, 245
probe_count: 5, 5
fade_start: 1
fade_end: 10
fade_target: 0

[bed_mesh module_3d]
version = 1
points =
	  0.0, 0.0, 0.0, 0.0, 0.0
	  0.0, 0.0, 0.0, 0.0, 0.0
	  0.0, 0.0, 0.0, 0.0, 0.0
	  0.0, 0.0, 0.0, 0.0, 0.0
	  0.0, 0.0, 0.0, 0.0, 0.0
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 10.0
max_x = 261.0
min_y = 10.0
max_y = 253.0

[gcode_macro TEST_PROBE]
gcode:
    QUERY_PROBE
    UPDATE_DELAYED_GCODE ID=test_probe_loop DURATION=1.0

[gcode_macro CANCEL_TEST_PROBE]
gcode:
    UPDATE_DELAYED_GCODE ID=test_probe_loop DURATION=0.0
    {action_respond_info('Abort check loop')}

[delayed_gcode test_probe_loop]
gcode:
    {% if printer["probe"].last_query %}
        UPDATE_DELAYED_GCODE ID=test_probe_loop DURATION=0.0
        {action_respond_info('Probe pressed, abort check loop')}
    {% else %}
        {action_respond_info('Probe not pressed')}
        QUERY_PROBE
        UPDATE_DELAYED_GCODE ID=test_probe_loop DURATION=1.0
    {% endif %}

[gcode_macro CALIBRATE_MODULE_THREE_D]
description: 3D module calibration
gcode:
    {% if printer["gcode_button five_axis_module"].state == "RELEASED" %}
        G0 X197 Y195 F6000
        PROBE
        G91
        G0 Z30 F600
        G90
        MODULE_THREE_D_MESH_CALIBRATE
	G91
        G0 Z30 F600
        G90
	G0 X150 Y50 F3600
    {% endif %}

[gcode_macro MODULE_THREE_D_MESH_CALIBRATE]
description: 3D module calibration
gcode:
    {% if printer["gcode_button five_axis_module"].state == "RELEASED" %}
        Z_OFFSET_APPLY_PROBE Z={printer.probe.last_result[2]}
        BED_MESH_CALIBRATE PROFILE=module_3d
        BED_MESH_CLEAR
    {% endif %}

[gcode_macro CALIBRATE_MODULE_FIVE_D]
description: 5D module calibration
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        M204 S500
        G0 C0.1
        G0 C0
        ADJUST_TEMPLATE_HEIGHT
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN

        PROBE_TEMPLATE_POINT POINT=O
        SET_A_OFFSET_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=CZ
        SET_A_OFFSET_POINT POINT=1
        CALC_A_AXIS_OFFSET
        PROBE_TEMPLATE_POINT POINT=O
        SET_A_OFFSET_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=CZ
        SET_A_OFFSET_POINT POINT=1
        CALC_A_AXIS_OFFSET

        PROBE_TEMPLATE_POINT POINT=CZ
        SET_B_COMPENSATION_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=CZ1
        SET_B_COMPENSATION_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=AZ
        SET_B_COMPENSATION_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=BZ
        SET_B_COMPENSATION_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=AX
        SET_B_COMPENSATION_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=BX
        SET_B_COMPENSATION_POINT POINT=5
        CALC_B_AXIS_COMPENSATION ENABLE=0

        ; skew corection
        ; xy skew
        ;PROBE_TEMPLATE_POINT POINT=AX
        ;SET_SKEW_COMPENSATION_POINT POINT=0
        ;PROBE_TEMPLATE_POINT POINT=BX
        ;SET_SKEW_COMPENSATION_POINT POINT=1
        ;PROBE_TEMPLATE_POINT POINT=XY1
        ;SET_SKEW_COMPENSATION_POINT POINT=2
        ;PROBE_TEMPLATE_POINT POINT=XY2
        ;SET_SKEW_COMPENSATION_POINT POINT=3
        ;CALC_SKEW_COMPENSATION FACTOR=XY
        ; xz skew
        ;PROBE_TEMPLATE_POINT POINT=BX
        ;SET_SKEW_COMPENSATION_POINT POINT=0
        ;PROBE_TEMPLATE_POINT POINT=AX
        ;SET_SKEW_COMPENSATION_POINT POINT=1
        ;PROBE_TEMPLATE_POINT POINT=XZ3
        ;SET_SKEW_COMPENSATION_POINT POINT=2
        ;PROBE_TEMPLATE_POINT POINT=XZ4
        ;SET_SKEW_COMPENSATION_POINT POINT=3
        ;CALC_SKEW_COMPENSATION FACTOR=XZ
        ; yz skew
        ;PROBE_TEMPLATE_POINT POINT=YZ1
        ;SET_SKEW_COMPENSATION_POINT POINT=0
        ;PROBE_TEMPLATE_POINT POINT=YZ2
        ;SET_SKEW_COMPENSATION_POINT POINT=1
        ;PROBE_TEMPLATE_POINT POINT=YZ3
        ;SET_SKEW_COMPENSATION_POINT POINT=2
        ;CALC_SKEW_COMPENSATION FACTOR=YZ
        ; save profile 5d
        ;SKEW_PROFILE SAVE=module_5d


        AUTO_WCS_OFFSET_NEW_SENSOR
        M204 S1500
    {% endif %}

[gcode_macro SET_C_ALIGN_POINT]
gcode:
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set index = params.POINT|default(0) %}
    SAVE_C_AXIS_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro SET_A_OFFSET_POINT]
gcode:
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set index = params.POINT|default(0) %}
    SAVE_A_AXIS_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro SET_B_COMPENSATION_POINT]
gcode:
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set index = params.POINT|default(0) %}
    SAVE_B_AXIS_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro SET_SKEW_COMPENSATION_POINT]
description: saved value about probe for align skew
gcode:
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set index = params.POINT|default(0) %}
    SAVE_SKEW_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro ADJUST_TEMPLATE_HEIGHT]
gcode:
    PROBE_TEMPLATE_POINT
    SET_TEMPLATE_HEIGHT

[gcode_macro SET_TEMPLATE_HEIGHT]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_TEMPLATE_POINT VARIABLE=probe_z VALUE={printer.probe.last_result[2] - printer.gcode_move.homing_origin.z}

[c_axis_align]
[auto_wcs]

[skew_correction module_3d]
xy_skew = 0.0
xz_skew = 0.0
yz_skew = 0.0

[skew_correction module_5d]
xy_skew = 0.0
xz_skew = 0.0
yz_skew = 0.0

[gcode_macro SET_AUTO_WCS_POINT]
gcode:
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    # checking the axes that they are within the allowable range
    {% set home_min = printer.toolhead.axis_minimum %}
    {% set home_max = printer.toolhead.axis_maximum %}
    {% if x < home_min[0] or x > home_max[0] %}
        {action_raise_error('axis x=%f out of range (%f - %f)' %  (x, home_min[0], home_max[0]))}
    {% elif y < home_min[1] or y > home_max[1] %}
        {action_raise_error('axis y=%f out of range (%f - %f)' %  (y, home_min[1], home_max[1]))}
    {% elif z < home_min[2] or z > home_max[2] %}
        {action_raise_error('axis z=%f out of range (%f - %f)' %  (z, home_min[2], home_max[2]))}
    {% endif %}
    {% set index = params.POINT|default(0) %}
    SAVE_WCS_CALC_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro AUTO_WCS_OFFSET_OLD_SERNSOR]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        G0 C0.1
        G0 C0
        ADJUST_TEMPLATE_HEIGHT
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ADJUST_TEMPLATE_HEIGHT
        SET_AUTO_WCS_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=AY1
        SET_AUTO_WCS_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=AY2
        SET_AUTO_WCS_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=AX
        SET_AUTO_WCS_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=BX
        SET_AUTO_WCS_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=DZ
        SET_AUTO_WCS_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=DY
        SET_AUTO_WCS_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=EY
        SET_AUTO_WCS_POINT POINT=6
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.25)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION=1
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        MOVE_TO_AUTO_WCS
    {% endif %}

[gcode_macro AUTO_WCS_OFFSET_NEW_SENSOR]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        G0 C0.1
        G0 C0
        ADJUST_TEMPLATE_HEIGHT
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ADJUST_TEMPLATE_HEIGHT
        SET_AUTO_WCS_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=AY2_2
        SET_AUTO_WCS_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=AY1_2
        SET_AUTO_WCS_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=BX
        SET_AUTO_WCS_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=AX
        SET_AUTO_WCS_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=DZ_2
        SET_AUTO_WCS_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=EY_2
        SET_AUTO_WCS_POINT POINT=6
        PROBE_TEMPLATE_POINT POINT=DY_2
        SET_AUTO_WCS_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=CX1
        SET_AUTO_WCS_POINT POINT=8
        PROBE_TEMPLATE_POINT POINT=CX2
        SET_AUTO_WCS_POINT POINT=9
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.3)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION=1
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        MOVE_TO_AUTO_WCS
    {% endif %}

[gcode_macro SAVE_PROBE_BACKLASH]
description: this macros save the sensor backlash.
gcode:
    {% set probe_backlash_x = printer.auto_wcs.probe_backlash_x %}
    {% set probe_backlash_y = printer.auto_wcs.probe_backlash_y %}
    {% set probe_backlash_y_2 = printer.auto_wcs.probe_backlash_y_2 %}
    SAVE_VARIABLE VARIABLE=probe_backlash_x VALUE={probe_backlash_x}
    SAVE_VARIABLE VARIABLE=probe_backlash_y VALUE={probe_backlash_y}
    SAVE_VARIABLE VARIABLE=probe_backlash_y_2 VALUE={probe_backlash_y_2}
    {action_respond_info('probe_backlash_x=%s' % probe_backlash_x)}
    {action_respond_info('probe_backlash_y=%s' % probe_backlash_y)}
    {action_respond_info('probe_backlash_y_2=%s' % probe_backlash_y_2)}

[gcode_macro SAVE_RADIUS_TOOL]
description: this macros save the radius tool.
gcode:
    SAVE_VARIABLE VARIABLE=tooling_radius VALUE={printer.auto_wcs.tooling_radius}
    SAVE_VARIABLE VARIABLE=tooling_radius_1 VALUE={printer.auto_wcs.tooling_radius_1}
    SAVE_VARIABLE VARIABLE=tooling_radius_2 VALUE={printer.auto_wcs.tooling_radius_2}

[gcode_macro MOVE_TO_AUTO_WCS]
gcode:
    {% set set_xy = params.XY|default(0) %}
    {% set y_shift = 50 if set_xy else 7 %}
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        G0 X{printer.auto_wcs.wcs[0][0]} Y{printer.auto_wcs.wcs[0][1] - y_shift} Z{printer.auto_wcs.wcs[0][2] + 10} F3600
    {% endif %}

[gcode_macro ADJUST_PROBE_OFFSET_Z]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        {% set wcs_0 = printer.auto_wcs.wcs[0] %}
        {% set wcs_1 = printer.auto_wcs.wcs[1] %}
        {% set offsets = printer.probe.offsets %}
        {% set coord_z = printer.gcode_move.position.z - printer.gcode_move.homing_origin.z %}
        {% set delta_z = wcs_0[2] - coord_z %}
        Z_OFFSET_APPLY_PROBE Z={(offsets[2] + delta_z)|abs}
        {% if params.ADJUST_CALIBRATION|default(0) %}
            {% set b_axis_params = printer.b_axis_compensation %}
            B_AXIS_COMPENSATION_VARS Z={b_axis_params.rot_center_z - delta_z}
        {% endif %}
        {% if params.ADJUST_WCS|default(0) %}
            {% set auto_wcs_params = printer.auto_wcs.wcs %}
            {% set x0 = auto_wcs_params[0][0] %}
            {% set y0 = auto_wcs_params[0][1] %}
            {% set z0 = auto_wcs_params[0][2] - delta_z %}
            SET_AUTO_WCS WCS=0 COORDS='{x0},{y0},{z0}'
            {% set x1 = auto_wcs_params[1][0] %}
            {% set y1 = auto_wcs_params[1][1] %}
            {% set z1 = auto_wcs_params[1][2] - delta_z %}
            SET_AUTO_WCS WCS=1 COORDS='{x1},{y1},{z1}'
        {% endif %}
    {% endif %}


[gcode_macro ADJUST_PROBE_OFFSET_XY]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        {% set y_shift = 50 %}
        {% set wcs_0 = printer.auto_wcs.wcs[0] %}
        {% set wcs_1 = printer.auto_wcs.wcs[1] %}
        {% set offsets = printer.probe.offsets %}
        {% set coord_x = printer.gcode_move.position.x - printer.gcode_move.homing_origin.x %}
        {% set coord_y = printer.gcode_move.position.y + y_shift - printer.gcode_move.homing_origin.y %}
        {% set delta_x = wcs_0[0] - coord_x %}
        {% set delta_y = wcs_0[1] - coord_y %}
        Z_OFFSET_APPLY_PROBE X={offsets[0] - delta_x} Y={offsets[1] - delta_y}
        {% if params.ADJUST_CALIBRATION|default(0) %}
            {% set b_axis_params = printer.b_axis_compensation %}
            B_AXIS_COMPENSATION_VARS X={b_axis_params.rot_center_x - delta_x}
        {% endif %}
        {% if params.ADJUST_WCS|default(0) %}
            {% set auto_wcs_params = printer.auto_wcs.wcs %}
            {% set x0 = auto_wcs_params[0][0] - delta_x %}
            {% set y0 = auto_wcs_params[0][1] - delta_y %}
            {% set z0 = auto_wcs_params[0][2] %}
            SET_AUTO_WCS WCS=0 COORDS='{x0},{y0},{z0}'
            {% set x1 = auto_wcs_params[1][0] - delta_x %}
            {% set y1 = auto_wcs_params[1][1] - delta_y %}
            {% set z1 = auto_wcs_params[1][2] %}
            SET_AUTO_WCS WCS=1 COORDS='{x1},{y1},{z1}'
        {% endif %}
    {% endif %}

[gcode_macro SET_WCS_FROM_AUTO_WCS]
gcode:
    {% set auto_wcs_params = printer.auto_wcs.wcs %}
    G10 L2 P2 X{auto_wcs_params[0][0]} Y{auto_wcs_params[0][1]} Z{auto_wcs_params[0][2]}
    G10 L2 P4 X{auto_wcs_params[0][0]} Y{auto_wcs_params[0][1]} Z{auto_wcs_params[0][2]}
    G10 L2 P3 X{auto_wcs_params[1][0]} Y{auto_wcs_params[1][1]} Z{auto_wcs_params[1][2]}
    G10 L2 P5 X{auto_wcs_params[1][0]} Y{auto_wcs_params[1][1]} Z{auto_wcs_params[1][2]}
    G90
    G0 Z150 F1500
    G54
    {% if printer.toolhead.axis_maximum[0] > 250 %}
        G0 X150 Y50 F3600
    {% else %}
        G0 X100 Y50 F3600
    {% endif %}

[gcode_macro AUTO_BASEMENT_WCS]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% if wcs == 0 %}
        ; move for measuring wcs_1_z
        AUTO_BASEMENT_WCS_MOVE
        PROBE
        G0 Z150 F3600
        ; set wcs_1_z, wcs_2_y(raw)
        ADJUST_BASEMENT_WCS WCS=2
        ; moving for measure radius the tool
        TOOL_RADIUS
        ; move and probing for measuring the wcs_2_y
        AUTO_BASEMENT_WCS_TWO_Y_MOVE
        ; set wcs_2_y
        ADJUST_BASEMENT_WCS WCS=3
        ; move and probing for measuring the wcs_2_z
        AUTO_BASEMENT_WCS_TWO_Z_MOVE
    {% endif %}
    PROBE
    G0 Z150 F3600

[gcode_macro AUTO_BASEMENT_WCS_MOVE]
description: This macro does a move for measuring wcs_1_z and wcs_2_y-raw or wcs_2_y and wcs_1_z-raw.
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_offsets = printer.gcode_move.wcs_offsets[wcs + 3] %}
    {% set x = wcs_offsets[0] - offsets[0] %}
    {% set y = wcs_offsets[1] - offsets[1] %}
    {% set z = wcs_offsets[2] + offsets[2] %}
    {% set a = '0' if wcs == 0 else '90' %}
    G28 A
    G0 A{a} F3600
    G0 Z150 F3600
    G0 X{x} Y{y} F3600

[gcode_macro AUTO_BASEMENT_WCS_TWO_Y_MOVE]
description: This macro does a move for measuring wcs_2_y.
variable_length_is_enough: 1
gcode:
    {% set offsets = printer.probe.offsets %}
    {% set wcs_offsets = printer.gcode_move.wcs_offsets[2] %}
    {% set radius = printer.auto_wcs.tooling_radius|float %}
    {% set x = wcs_offsets[0] - offsets[0] %}
    {% set y = wcs_offsets[1] - offsets[1] %}
    {% set z = wcs_offsets[2] + offsets[2] %}
    {% set old_y = printer.gcode_move.wcs_offsets[4][1] %}
    {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
    {% set wcs_2_y = printer.gcode_move.wcs_offsets[2][1] %}
    {% set tool_length = old_y + template_thickness - wcs_2_y %}
    {action_respond_info('tool_length=%s' % tool_length)}
    {% if tool_length > 35.0 %}
        SET_GCODE_VARIABLE MACRO=AUTO_BASEMENT_WCS_TWO_Y_MOVE VARIABLE=length_is_enough VALUE=1
        G0 A90 F3600
        G0 X{x} Y{y - 20} F3600
        G0 Z{z + (radius - 4) } F3600
        PROBE AXIS=y POSITIVE_DIR=1
        G0 X{x} Y{y - 20} F3600
    {% else %}
        SET_GCODE_VARIABLE MACRO=AUTO_BASEMENT_WCS_TWO_Y_MOVE VARIABLE=length_is_enough VALUE=0
        SEND_ERROR
    {% endif %}

[gcode_macro SEND_ERROR]
gcode:
    {action_raise_error("Tool length not enough for calculate wcs_2_y!")}

[gcode_macro TOOL_RADIUS]
description: moved to measure tool radius and calculate it.
gcode:
    {% for i in range(3) %}
        AUTO_BASEMENT_MOVE_MEASURE_RADIUS PROBE={i}
        SET_AUTO_WCS_POINT_RADIUS POINT={i}
    {% endfor %}
    GET_RADIUS_TOOLING
    SAVE_RADIUS_TOOL

[gcode_macro AUTO_BASEMENT_MOVE_MEASURE_RADIUS]
description: measuring radius for geting wcs_2_z.
gcode:
    {% set probe = params.PROBE|default(0)|int %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_offsets = printer.gcode_move.wcs_offsets[1] %}
    {% set point = printer.probe.last_result %}
    {% set x = wcs_offsets[0] - offsets[0] %}
    {% set y = wcs_offsets[1] - offsets[1] %}
    {% set z = wcs_offsets[2] + offsets[2] %}
    G0 A0 F3600
    {% if probe == 0 %}
        G0 X{x} Y{y - 60} F3600
        G0 Z{z - 5} F3600
        PROBE AXIS=y POSITIVE_DIR=1
        G0 X{x} Y{y - 60} F3600
    {% elif probe == 1 %}
        {% set advance_radius = y - point[1] %}
        G0 X{x - (advance_radius + 10)} Y{y} F3600
        G0 Z{z - 5} F3600
        PROBE AXIS=x POSITIVE_DIR=1
        G0 X{x - (advance_radius + 10)} Y{y} F3600
    {% elif probe == 2 %}
        {% set advance_radius = x - point[0] %}
        G0 X{x + (advance_radius + 10)} Y{y} F3600
        G0 Z{z - 5} F3600
        PROBE AXIS=x POSITIVE_DIR=0
        G0 X{x + (advance_radius + 10)} Y{y} F3600
    {% endif %}
    G0 Z{z + 10} F3600

[gcode_macro SET_AUTO_WCS_POINT_RADIUS]
description: This macro is for saving the points required for calculating the radius.
gcode:
    {% set point = printer.probe.last_result %}
    {% set index = params.POINT|default(0) %}
    {% set x = point[0] %}
    {% set y = point[1] %}
    {% set z = point[2] %}
    SAVE_WCS_CALC_POINT POINT={index} COORDS='{x},{y},{z}'

[gcode_macro AUTO_BASEMENT_WCS_TWO_Z_MOVE]
description: This macro does a move for measuring wcs_2_z.
gcode:
    {% set offsets = printer.probe.offsets %}
    {% set wcs_offsets = printer.gcode_move.wcs_offsets[2] %}
    {% set radius = printer.auto_wcs.tooling_radius %}
    {% set x = wcs_offsets[0] - offsets[0] %}
    {% set y = wcs_offsets[1] - offsets[1] %}
    {% set z = wcs_offsets[2] + offsets[2] %}
    G0 A90 F3600
    G0 Z{z + (radius + 10)} F3600
    G0 X{x} Y{y + 5} F3600

[gcode_macro ADJUST_BASEMENT_WCS]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    {% set probe_backlash_y = printer.save_variables.variables.probe_backlash_y|default(0.0)|float %}
    {% if wcs == 0 %}
        ; Mode SPIRAL-FULL
        ; apply measuring for the set wcs_2_z radius.
        {% if printer['gcode_macro AUTO_BASEMENT_WCS_TWO_Y_MOVE'].length_is_enough|int %}
            {% set radius = printer.auto_wcs.tooling_radius %}
            G10 L2 P3 Z{z - radius}
        {% else %}
            {action_respond_info('Error, tool length not enough for calculate wcs_2_y!')}
        {% endif %}
    {% elif wcs == 1 %}
        ; Mode SPIRAL
        ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
        G10 L2 P3 Y{y}
        G10 L2 P2 Z{old_z - (y - old_y)}
    {% elif wcs == 2 %}
        ; crutch! for the support different version sensor
        ; set wcs_1_z and wcs_2_y(raw).
        G10 L2 P2 Z{z}
        G10 L2 P3 Y{old_y - (z - old_z)}
    {% elif wcs == 3 %}
        ; crutch! for the support different version sensor
        ; apply measuring for the set wcs_2_y
        G10 L2 P3 Y{y + probe_backlash_y}
    {% endif %}
