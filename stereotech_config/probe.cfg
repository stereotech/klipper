[probe]
pin: !PG13
samples: 4
samples_tolerance_retries: 1
samples_result: median
lift_speed: 10.0
x_offset: -42.3
y_offset: -48.14
z_offset: 0.0

[gcode_macro SET_PROBE_SENSOR]
description: Set offsets for new sensor and set sensor version.
gcode:
    {% set probe_sensor_version = params.PROBE_VERSION|default(0)|int %}
    {% if probe_sensor_version > 0 %}
        {% set x_offset = -40.0 %}
        {% set y_offset = -34.0 %}
        {% set z_offset = 0.0 %}
    {% else %}
        {% set x_offset = -42.3 %}
        {% set y_offset = -48.14 %}
        {% set z_offset = 0.0 %}
    {% endif %}
    Z_OFFSET_APPLY_PROBE X={x_offset} Y={y_offset} Z={z_offset}
    SAVE_VARIABLE VARIABLE=probe_sensor_version VALUE={probe_sensor_version}
    SAVE_VARIABLE VARIABLE=probe_offset_x VALUE={x_offset}
    SAVE_VARIABLE VARIABLE=probe_offset_y VALUE={y_offset}
    SAVE_VARIABLE VARIABLE=probe_offset_z VALUE={z_offset}
    {action_respond_info("Apply offset for new sensor: x_offset= %s, y_offset= %s, z_offset= %s" % (x_offset, y_offset, z_offset))}

[gcode_macro CHECK_SENSOR_VERSION_AND_START_AUTOCALIBRATE]
gcode:
    {% set probe_sensor_version = printer.save_variables.variables.probe_sensor_version|default(0)|int %}
    {% if probe_sensor_version > 0 %}
        AUTO_WCS_OFFSET_NEW_SENSOR
    {% else %}
        AUTO_WCS_OFFSET_OLD_SERNSOR
    {% endif %}

[gcode_macro AUTO_WCS_OFFSET_OLD_SERNSOR]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        {% set probe_sensor_version = printer.save_variables.variables.probe_sensor_version|default(0)|int %}
        G0 C0.1
        G0 C0
        ADJUST_TEMPLATE_HEIGHT
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ADJUST_TEMPLATE_HEIGHT
        SET_AUTO_WCS_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=AY1
        SET_AUTO_WCS_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=AY2
        SET_AUTO_WCS_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=AX
        SET_AUTO_WCS_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=BX
        SET_AUTO_WCS_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=DZ
        SET_AUTO_WCS_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=DY
        SET_AUTO_WCS_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=EY
        SET_AUTO_WCS_POINT POINT=6
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.25)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION={probe_sensor_version}
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        MOVE_TO_AUTO_WCS
    {% endif %}

[gcode_macro AUTO_WCS_OFFSET_NEW_SENSOR]
gcode:
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" %}
        {% set probe_sensor_version = printer.save_variables.variables.probe_sensor_version|default(0)|int %}
        G0 C0.1
        G0 C0
        ADJUST_TEMPLATE_HEIGHT
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        ADJUST_TEMPLATE_HEIGHT
        SET_AUTO_WCS_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=AY2_2
        SET_AUTO_WCS_POINT POINT=7
        PROBE_TEMPLATE_POINT POINT=AY1_2
        SET_AUTO_WCS_POINT POINT=1
        PROBE_TEMPLATE_POINT POINT=BX
        SET_AUTO_WCS_POINT POINT=3
        PROBE_TEMPLATE_POINT POINT=AX
        SET_AUTO_WCS_POINT POINT=2
        PROBE_TEMPLATE_POINT POINT=DZ_2
        SET_AUTO_WCS_POINT POINT=4
        PROBE_TEMPLATE_POINT POINT=EY_2
        SET_AUTO_WCS_POINT POINT=6
        PROBE_TEMPLATE_POINT POINT=DY_2
        SET_AUTO_WCS_POINT POINT=5
        PROBE_TEMPLATE_POINT POINT=CX1
        SET_AUTO_WCS_POINT POINT=8
        PROBE_TEMPLATE_POINT POINT=CX2
        SET_AUTO_WCS_POINT POINT=9
        {% set template_thickness = printer.save_variables.variables.template_thickness|default(10.0)|float %}
        {% set auto_wcs_adj = printer.save_variables.variables.auto_wcs_adj|default(0.3)|float %}
        CALC_WCS_PARAMS THICKNESS={ template_thickness } ADJUSTMENT={ auto_wcs_adj } SENSOR_VERSION={probe_sensor_version}
        PROBE_TEMPLATE_POINT POINT=AY
        SET_C_ALIGN_POINT POINT=0
        PROBE_TEMPLATE_POINT POINT=BY
        SET_C_ALIGN_POINT POINT=1
        CALC_C_AXIS_ALIGN
        MOVE_TO_AUTO_WCS
    {% endif %}

[gcode_macro AUTO_BASEMENT_WCS]
description: macro do main moves for get wcs for SPIRAL and FULL modes.
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set probe_sensor_version = printer.save_variables.variables.probe_sensor_version|default(0)|int %}
    {% if wcs == 0 %}
        ; meachuring for mode the FULL
        {% if probe_sensor_version %}
            MOVE_AUTOCALIBRATE_FULL_V_2
        {% else %}
            ; move for measuring wcs_1_z
            AUTO_BASEMENT_WCS_MOVE
            PROBE
            G0 Z150 F3600
        {% endif %}
    {% else %}
        ; meachuring for mode the SPIRAL
        {% if probe_sensor_version %}
            MOVE_AUTOCALIBRATE_SPIRAL_V_2
        {% else %}
            ; move for measuring wcs_2_y
            PROBE
            G0 Z150 F3600
        {% endif %}
    {% endif %}

[gcode_macro ADJUST_BASEMENT_WCS]
gcode:
    {% set wcs = params.WCS|default(0)|int %}
    {% set point = printer.probe.last_result %}
    {% set offsets = printer.probe.offsets %}
    {% set wcs_0 = printer.gcode_move.wcs_offsets[3] %}
    {% set x = point[0] + offsets[0] - printer.gcode_move.homing_origin.x %}
    {% set y = point[1] + offsets[1] - printer.gcode_move.homing_origin.y %}
    {% set z = point[2] - offsets[2] - printer.gcode_move.homing_origin.z %}
    {% set wcs_1 = printer.gcode_move.wcs_offsets[4] %}
    {% set old_z = wcs_0[2] %}
    {% set old_y = wcs_1[1] %}
    {% set probe_sensor_version = printer.save_variables.variables.probe_sensor_version|default(0)|int %}
    {% set probe_backlash_y = printer.auto_wcs.probe_backlash_y|default(0.0)|float %}
    {% set tool_length = printer['gcode_macro GET_TOOL_LENGTH'].tool_length|float %}
    {% set radius = printer.auto_wcs.tooling_radius %}
    {% if wcs == 0 %}
        ; Mode SPIRAL-FULL
        {% if probe_sensor_version %}
            ; apply measuring for the set wcs_2_z radius.
            {% if tool_length > 35.0 %}
                G10 L2 P3 Z{z - radius}
            {% else %}
                {action_raise_error('204: Error, tool length not enough for calculate wcs_2_y!')}
            {% endif %}
        {% else %}
            ; apply measuring for the set wcs_1_z and wcs_2_y(raw).
            G10 L2 P2 Z{z}
            G10 L2 P3 Y{old_y - (z - old_z)}
        {% endif %}
    {% elif wcs == 1 %}
        ; Mode SPIRAL
        {% if probe_sensor_version and radius < 5.0 and tool_length > 35.0 %}
            G10 L2 P3 Z{z - radius}
        {% else %}
            ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
            G10 L2 P3 Y{y}
            G10 L2 P2 Z{old_z - (y - old_y)}
        {% endif %}
    {% elif wcs == 2 %}
        ; set wcs_1_z and wcs_2_y(raw).
        G10 L2 P2 Z{z}
        G10 L2 P3 Y{old_y - (z - old_z)}
    {% elif wcs == 3 %}
        ; apply measuring for the set wcs_2_y
        G10 L2 P3 Y{y + probe_backlash_y}
    {% elif wcs == 4 %}
        {% set x = printer.auto_wcs.wcs[0][0]|float %}
        ; set wcs_1_x
        G10 L2 P2 X{x}
    {% elif wcs == 5 %}
        {% set y = printer.auto_wcs.wcs[0][1]|float %}
        ; set wcs_1_y
        G10 L2 P2 Y{y}
    {% elif wcs == 6 %}
        {% set x = printer.auto_wcs.wcs[1][0]|float %}
        ; set the wcs_2_x
        G10 L2 P3 X{x}
    {% elif wcs == 7 %}
        ; apply measuring for the set wcs_2_y and wcs_1_z(raw).
        G10 L2 P3 Y{y}
        G10 L2 P2 Z{old_z - (y - old_y)}
    {% endif %}
