[gcode_macro CHECK_MOVE_AXIS]
description: Checking move for axis.
gcode:
    {% set axis = params.AXIS|default('x')|lower %}
    {% set axes = ['x', 'y', 'z', 'a', 'c'] %}
    {action_respond_info("Starting check the axis '%s'." % axis)}
    {% for i in range(5) %}
        {% if axes[i] == axis %}
            {% set axis_min = printer.toolhead.axis_minimum[i]|float %}
            {% if axis_min < 0 %}
                {% set axis_min = 0 %}
            {% endif %}
            G28 {axis ~ '0'}
            {% if axis == 'c' %}
                G1 {axis ~ 50} F600
                G1 {axis ~ -50} F600
            {% else %}
                G1 {axis ~ axis_min} F600
            {% endif %}
            G28 {axis ~ '0'}
            M84
        {% endif %}
    {% endfor %}

[gcode_macro CHECK_STEPPER]
description: Turns on the stepper and checks it.
gcode:
    {% set stepper = 'stepper_' ~ params.STEPPER|default('x')|lower %}
    {action_respond_info("Starting check the stepper '%s'." % stepper)}
    SET_STEPPER_ENABLE STEPPER={stepper} ENABLE=1
    DUMP_TMC STEPPER={stepper}

[gcode_macro CHECK_AXIS_ENDSTOP]
description: Starts a loop to test the endstop switch axis.
variable_axis_for_test: 0
gcode:
    {% set axis = params.AXIS|default('x')|lower %}
    {% set axes = ['x', 'y', 'z', 'a', 'c'] %}
    {action_respond_info("Starting check the axis '%s' endstop switch." % axis)}
    QUERY_ENDSTOPS
    {% if axis in ['x', 'y', 'a'] %}
        {% for i in range(5) %}
            {% if axes[i] == axis %}
                SET_GCODE_VARIABLE MACRO=CHECK_AXIS_ENDSTOP VARIABLE=axis_for_test VALUE={i}
                UPDATE_DELAYED_GCODE ID=loop_check_endstop DURATION=1.0
            {% endif %}
        {% endfor %}
    {% elif axis == 'z' %}
        {action_respond_info("Endstop switch axis '%s' cannot be checked manually." % axis)}
    {% else %}
        {action_respond_info("Axis '%s' does not have a endstop switch." % axis)}
    {% endif %}

[gcode_macro CANCEL_CHECK_AXIS_ENDSTOP]
description: Cancel the endstop switch test cycle.
gcode:
    UPDATE_DELAYED_GCODE ID=loop_check_endstop DURATION=0.0
    {action_respond_info('Canceled checking the axis endstop switch.')}

[delayed_gcode loop_check_endstop]
gcode:
    {% set axes = ['x', 'y', 'z', 'a', 'c'] %}
    {% set axis = printer["gcode_macro CHECK_AXIS_ENDSTOP"].axis_for_test %}
    {% if printer.query_endstops.last_query[axes[axis]] %}
        UPDATE_DELAYED_GCODE ID=loop_check_endstop DURATION=0.0
        {action_respond_info("Endstop switch triggered, finish check axis '%s'." % axes[axis])}
    {% else %}
        {action_respond_info("Endstop switch axis '%s' not pressed." % axes[axis])}
        QUERY_ENDSTOPS
        UPDATE_DELAYED_GCODE ID=loop_check_endstop DURATION=1.0
    {% endif %}

[gcode_macro CHECK_HEATER]
description: Checking heater for in move.
gcode:
    {% set heater = params.HEATER|default('extruder')|lower %}
    {% set temp = params.TEMP|default(100)|float %}
    G28
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G1 X{printer.toolhead.axis_minimum[0]} Y{printer.toolhead.axis_minimum[1]} Z{printer.toolhead.axis_minimum[2] * 0} F3600
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G1 X{printer.toolhead.axis_minimum[0]} Y{printer.toolhead.axis_maximum[1]} Z{printer.toolhead.axis_maximum[2]} F3600
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G1 X{printer.toolhead.axis_maximum[0]} Y{printer.toolhead.axis_minimum[1]} Z{printer.toolhead.axis_minimum[2] * 0} F3600
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G1 X{printer.toolhead.axis_maximum[0]} Y{printer.toolhead.axis_maximum[1]} Z{printer.toolhead.axis_maximum[2]} F3600
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G1 X{printer.toolhead.axis_minimum[0]} Y{printer.toolhead.axis_minimum[1]} Z{printer.toolhead.axis_minimum[2] * 0} F3600
    SET_TEMP_HEATER HEATER={heater} TEMP={temp}
    G28
    M84

[gcode_macro SET_TEMP_HEATER]
description: Set temperature for heater, wait its and turn off.
gcode:
    {% set heater = params.HEATER|default('extruder')|lower %}
    {% set temp = params.TEMP|default(100)|float %}
    {% if printer["gcode_button five_axis_module"].state == "PRESSED" and heater == "heater_bed" %}
        {action_raise_error("3D module disabled, cannot set temperature for heater 'heater_bed'.")}
    {% else %}
        SET_HEATER_TEMPERATURE HEATER={heater} TARGET={temp}
        TEMPERATURE_WAIT SENSOR={heater} MINIMUM={temp} MAXIMUM={temp + 2}
        G4 P4000
        TURN_OFF_HEATERS
    {% endif %}

[gcode_macro CHECK_LED]
description: Checking led interface.
gcode:
    {% for color in ['R','G','B'] %}
        {% for i in range(51) %}
            M150 {color ~ i * 5}
            G4 P50
        {% endfor %}
    {% endfor %}
    M150 R255 G255 B255

[gcode_macro CHECK_EXTRUDER]
description: Checking extruder.
gcode:
    {% set extruder = params.EXTRUDER|default('extruder')|lower %}
    {% if printer["filament_motion_sensor " ~ extruder ~ "_sensor"] %}
        {% set temp = params.TEMP|default(230)|float %}
        {% set sensor_enabled = printer["filament_motion_sensor " ~ extruder ~ "_sensor"].enabled %}

        {action_respond_info("Running check extrusion for '%s', temperature=%f." % (extruder, temp))}
        SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={temp}
        TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={temp - 2} MAXIMUM={temp + 2}
        {% if extruder == 'extruder' %}
            T0
        {% else %}
            T1
        {% endif %}
        SET_FILAMENT_SENSOR SENSOR={extruder ~ "_sensor"} ENABLE=1
        G4 P4000
        M83
        G1 E50 F300
        CUT_FIBER
        PRIME_FIBER
        G1 E-3 F300
        TURN_OFF_HEATERS
        {% if sensor_enabled is false %}
            SET_FILAMENT_SENSOR SENSOR={extruder ~ "_sensor"} ENABLE=0
        {% endif %}
        T0 # return to main state
    {% else %}
        {action_raise_error("Extruder '%s' not connected." % extruder)}
    {% endif %}

[gcode_macro CHECK_FAN]
description: Checking fans.
gcode:
    {% set fan = params.FAN|default('fan') %}
    {% if fan == 'fan' %}
        M106 S255
        G4 P5000
        M107
    {% elif fan == 'chamber_fan' %}
        SET_FAN_SPEED FAN=chamber_fan SPEED=1.0
        G4 P5000
        SET_FAN_SPEED FAN=chamber_fan SPEED=0.0
    {% endif %}
