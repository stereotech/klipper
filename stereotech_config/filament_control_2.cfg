[filament_motion_sensor extruder_sensor]
extruder: extruder
detection_length: 10.5
event_delay: 15.0
switch_pin: PG14
pause_on_runout: False
runout_gcode:
    {% if printer.virtual_sdcard.is_active %}
        M117 trigered_filament_sensor0
        {action_respond_info('The filament has run out or there is a problem with its supply at the Extruder0.')}
        RECOVER_EXTRUSION SENSOR='extruder_sensor'
    {% else %}
        FILAMENT_ERROR EXTRUDER=extruder
    {% endif %}

[gcode_macro FILAMENT_ERROR]
gcode:
    {% if params.EXTRUDER == 'extruder' %}
        {action_raise_error('Filament error on Extruder 1')}
    {% else %}
        {action_raise_error('Filament error on Extruder 2')}
    {% endif %}

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
    SET_FILAMENT_SENSOR_OLD SENSOR={params.SENSOR} ENABLE={params.ENABLE}
    SAVE_VARIABLE VARIABLE={params.SENSOR} VALUE={params.ENABLE}

[gcode_macro RECOVER_EXTRUSION]
variable_enable_offset: 1
variable_enable_prime: 1
variable_enable_second_extruder: 0
gcode:
    {% set sensor = params.SENSOR %}
    {% if params.RESET %}
        RECOVER_EXTRUSION_BY_OFFSET RESET=1
        RECOVER_EXTRUSION_BY_PRIME SENSOR={sensor} RESET=1
        {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_second_extruder %}
            RECOVER_EXTRUSION_BY_SECOND_EXTRUDER RESET=1
        {% endif %}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_offset VALUE=1
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_prime VALUE=1
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_second_extruder VALUE=0
    {% else %}
        {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_offset and printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].checks_made < printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].check_count %}
            RECOVER_EXTRUSION_BY_OFFSET
        {% else %}
            {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_offset %}
                RECOVER_EXTRUSION_BY_OFFSET RESET=1
                SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_offset VALUE=0
            {% endif %}
            {% if not printer.pause_resume.is_paused %}
                PAUSE TURN_OFF_EXTRUDERS=0 E=0
            {% endif %}
            {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_prime and (printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].checks_made < printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].check_count or printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].use_cooldown) %}
                RECOVER_EXTRUSION_BY_PRIME SENSOR={sensor}
            {% else %}
                {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_prime %}
                    RECOVER_EXTRUSION_BY_PRIME SENSOR={sensor} RESET=1
                    SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_prime VALUE=0
                {% endif %}
                {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_second_extruder and sensor == 'extruder_sensor' and printer["filament_motion_sensor extruder1_sensor"] and not printer["gcode_macro RECOVER_EXTRUSION_BY_SECOND_EXTRUDER"].enabled %}
                    RECOVER_EXTRUSION_BY_SECOND_EXTRUDER
                {% else %}
                    {% if printer["gcode_macro RECOVER_EXTRUSION"].enable_second_extruder and sensor == 'extruder_sensor' %}
                        RECOVER_EXTRUSION_BY_SECOND_EXTRUDER RESET=1
                        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_second_extruder VALUE=0
                    {% endif %}
                    #Set timeout and wait for user
                    UPDATE_DELAYED_GCODE ID=TURN_OFF_EXTRUDERS_DELAYED DURATION=300
                    SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_offset VALUE=1
                    SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_prime VALUE=1
                    SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION VARIABLE=enable_second_extruder VALUE=0
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

[delayed_gcode RECOVER_EXTRUSION_DELAY]
gcode:
    RECOVER_EXTRUSION SENSOR='extruder_sensor'

[gcode_macro RECOVER_EXTRUSION_BY_OFFSET]
variable_check_count: 3
variable_checks_made: 0
variable_check_value: 0.1
gcode:
    {% if params.RESET %}
        {% set reset_value = printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].check_value * printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].checks_made %}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_OFFSET VARIABLE=checks_made VALUE=0
        {% if printer.gcode_move.current_wcs == 0 %}
            SET_GCODE_OFFSET Z_ADJUST=-{reset_value} MOVE=1
        {% else %}
            G10 L2 P0 R1 Z-{reset_value}
        {% endif %}
    {% else %}
        {% if printer.gcode_move.current_wcs == 0 %}
            SET_GCODE_OFFSET Z_ADJUST={printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].check_value} MOVE=1
        {% else %}
            G10 L2 P0 R1 Z{printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].check_value}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_OFFSET VARIABLE=checks_made VALUE={printer["gcode_macro RECOVER_EXTRUSION_BY_OFFSET"].checks_made + 1}
    {% endif %}

[gcode_macro RECOVER_EXTRUSION_BY_PRIME]
variable_check_count: 3
variable_checks_made: 0
variable_use_cooldown: 1
gcode:
    {% set sensor = params.SENSOR %}
    {% set extruder = 'extruder' if sensor == 'extruder_sensor' else 'extruder1' %}
    {% if params.RESET %}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_PRIME VARIABLE=checks_made VALUE=0
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_PRIME VARIABLE=use_cooldown VALUE=1
    {% else %}
        {% if printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].use_cooldown and printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].checks_made >= printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].check_count %}
            {% set extruder_temp = printer["gcode_macro PAUSE"].extruder_temp if extruder == 'extruder' else printer["gcode_macro PAUSE"].extruder1_temp %}
            M117 cooling_extruder
            M106 S255
            M109 S50
            M107
            M117 heat_extruder
            M109 S{extruder_temp}
            M400
            G4 P3000
            LOAD_MATERIAL
            LOAD_MATERIAL
            M400
            G4 P3000
            SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_PRIME VARIABLE=use_cooldown VALUE=0
            CHECK_FILAMENT_MOTION_SENSOR SENSOR={sensor}
        {% else %}
            M400
            G4 P3000
            LOAD_MATERIAL
            LOAD_MATERIAL
            M400
            G4 P3000
            SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_PRIME VARIABLE=checks_made VALUE={printer["gcode_macro RECOVER_EXTRUSION_BY_PRIME"].checks_made + 1}
            CHECK_FILAMENT_MOTION_SENSOR SENSOR={sensor}
        {% endif %}
    {% endif %}

[gcode_macro CHECK_FILAMENT_MOTION_SENSOR]
gcode:
    {% set sensor = params.SENSOR %}
    {% set filament_detected = printer['filament_motion_sensor ' ~ sensor].filament_detected %}
    {% if filament_detected %}
        {action_respond_info('Extruding attempt completed successfully, resuming printing.')}
        RESUME
    {% else %}
        UPDATE_DELAYED_GCODE ID=RECOVER_EXTRUSION_DELAY DURATION=1
    {% endif %}

[gcode_macro RECOVER_EXTRUSION_BY_SECOND_EXTRUDER]
variable_enabled: 0
gcode:
    {% if params.RESET and printer["gcode_macro RECOVER_EXTRUSION_BY_SECOND_EXTRUDER"].enabled %}
        SET_GCODE_OFFSET X_ADJUST=25.0 MOVE=1
        ENABLE_CONSTRAIN ENABLE=0
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=0
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE=0
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_SECOND_EXTRUDER VARIABLE=enabled VALUE=0
    {% else %}
        SET_GCODE_VARIABLE MACRO=RECOVER_EXTRUSION_BY_SECOND_EXTRUDER VARIABLE=enabled VALUE=1
        SET_GCODE_OFFSET X_ADJUST=-25.0 MOVE=1
        ENABLE_CONSTRAIN ENABLE=1
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=current_extruder VALUE=1
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder1_temp VALUE={printer["gcode_macro PAUSE"].extruder_temp}
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE=0
        RESUME
    {% endif %}
